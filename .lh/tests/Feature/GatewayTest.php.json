{
    "sourceFile": "tests/Feature/GatewayTest.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 276,
            "patches": [
                {
                    "date": 1722420931409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722420940577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    public function test_te(): void\n+    public function test_set_datab(): void\n     {\n         $response = $this->get('/');\n \n         $response->assertStatus(200);\n"
                },
                {
                    "date": 1722420948354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    public function test_set_datab(): void\n+    public function test_set_database_config(): void\n     {\n         $response = $this->get('/');\n \n         $response->assertStatus(200);\n"
                },
                {
                    "date": 1722420956909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n     {\n+        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n \n         $response->assertStatus(200);\n     }\n"
                },
                {
                    "date": 1722420963529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n+\n class GatewayTest extends TestCase\n {\n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1722420973384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n \n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n+use Illuminate\\Support\\Facades\\Artisan;\n \n-\n class GatewayTest extends TestCase\n {\n     /**\n      * A basic feature test example.\n@@ -15,8 +15,7 @@\n     public function test_set_database_config(): void\n     {\n         Artisan::call('migrate:refresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n-\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1722421313276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,23 @@\n         Artisan::call('migrate:refresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n     }\n+\n+    public function test_get_users_list(): void\n+    {\n+        $response = $this->get('/api/users/');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            [\n+                'id',\n+                'name',\n+                'email',\n+                'email_verified_at',\n+                'created_at',\n+                'updated_at',\n+            ]\n+        ]);\n+        $response->assertJsonFragment(['name' => 'Rosco']);\n+        $response->assertJsonCount(5);\n+    }\n }\n"
                },
                {
                    "date": 1722421323066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         $response = $this->get('/');\n         $response->assertStatus(200);\n     }\n \n-    public function test_get_users_list(): void\n+    public function test_get_list(): void\n     {\n         $response = $this->get('/api/users/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n"
                },
                {
                    "date": 1722421331539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n         $response = $this->get('/');\n         $response->assertStatus(200);\n     }\n \n-    public function test_get_list(): void\n+    public function test_get_gateway_list(): void\n     {\n-        $response = $this->get('/api/users/');\n+        $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             [\n                 'id',\n"
                },
                {
                    "date": 1722421367306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         $response->assertJsonStructure([\n             [\n                 'id',\n                 'name',\n-                'email',\n+                'serial_number',\n                 'email_verified_at',\n                 'created_at',\n                 'updated_at',\n             ]\n"
                },
                {
                    "date": 1722421374771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,11 +25,11 @@\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             [\n                 'id',\n+                'serial_number',\n                 'name',\n-                'serial_number',\n-                'email_verified_at',\n+                'IPv4_address',\n                 'created_at',\n                 'updated_at',\n             ]\n         ]);\n"
                },
                {
                    "date": 1722421463226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,12 +28,28 @@\n                 'id',\n                 'serial_number',\n                 'name',\n                 'IPv4_address',\n+                'peripheral',\n                 'created_at',\n                 'updated_at',\n             ]\n         ]);\n         $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n+\n+    public function test_get_user_detail(): void\n+    {\n+        $response = $this->get('/api/users/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'id',\n+            'name',\n+            'email',\n+            'email_verified_at',\n+            'created_at',\n+            'updated_at',\n+        ]);\n+        $response->assertJsonFragment(['name' => 'Rosco']);\n+    }\n }\n"
                },
                {
                    "date": 1722421470817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n \n-    public function test_get_user_detail(): void\n+    public function test_get_gateway_detail(): void\n     {\n         $response = $this->get('/api/users/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n"
                },
                {
                    "date": 1722421479972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,15 +39,16 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->get('/api/users/1');\n+        $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'id',\n+            'serial_number',\n             'name',\n-            'email',\n-            'email_verified_at',\n+            'IPv4_address',\n+            'peripheral',\n             'created_at',\n             'updated_at',\n         ]);\n         $response->assertJsonFragment(['name' => 'Rosco']);\n"
                },
                {
                    "date": 1722421516549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,35 +22,17 @@\n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            [\n-                'id',\n-                'serial_number',\n-                'name',\n-                'IPv4_address',\n-                'peripheral',\n-                'created_at',\n-                'updated_at',\n-            ]\n-        ]);\n+        $response->assertJsonStructure([['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            'id',\n-            'serial_number',\n-            'name',\n-            'IPv4_address',\n-            'peripheral',\n-            'created_at',\n-            'updated_at',\n-        ]);\n-        $response->assertJsonFragment(['name' => 'Rosco']);\n+        $response->assertJsonStructure(['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n+        $response->assertJsonFragment(['id' => 'Rosco']);\n     }\n }\n"
                },
                {
                    "date": 1722421522043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,7 +32,7 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n-        $response->assertJsonFragment(['id' => 'Rosco']);\n+        $response->assertJsonFragment(['id' => '1]);\n     }\n }\n"
                },
                {
                    "date": 1722421562976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,7 +32,14 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n-        $response->assertJsonFragment(['id' => '1]);\n+        $response->assertJsonFragment(['id' => 1]);\n     }\n+\n+\n+    public function test_get_user_non_existing_user_detail(): void\n+    {\n+        $response = $this->get('/api/users/66');\n+        $response->assertStatus(404);\n+    }\n }\n"
                },
                {
                    "date": 1722421568029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n \n-    public function test_get_user_non_existing_user_detail(): void\n+    public function test_get_gateway_non_existing_user_detail(): void\n     {\n         $response = $this->get('/api/users/66');\n         $response->assertStatus(404);\n     }\n"
                },
                {
                    "date": 1722421578633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,10 @@\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n \n-    public function test_get_gateway_non_existing_user_detail(): void\n+    public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->get('/api/users/66');\n+        $response = $this->get('/api/gateway/66');\n         $response->assertStatus(404);\n     }\n }\n"
                },
                {
                    "date": 1722421585975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,8 @@\n \n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->get('/api/gateway/66');\n+        $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n }\n"
                },
                {
                    "date": 1722422139481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-    }\n+    // public function test_set_database_config(): void\n+    // {\n+    //     Artisan::call('migrate:refresh --seed --env=\"testing\"');\n+    //     $response = $this->get('/');\n+    //     $response->assertStatus(200);\n+    // }\n \n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n@@ -35,9 +35,8 @@\n         $response->assertJsonStructure(['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n-\n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n"
                },
                {
                    "date": 1722422178946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['name' => 'Rosco']);\n+        // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n \n     public function test_get_gateway_detail(): void\n"
                },
                {
                    "date": 1722422388686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonStructure([]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n \n"
                },
                {
                    "date": 1722422394149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,11 @@\n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([]);\n+        $response->assertJsonStructure([\n+            ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+        ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n \n"
                },
                {
                    "date": 1722422416725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            \"data\"['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5);\n     }\n"
                },
                {
                    "date": 1722422447432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,12 +23,12 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\"['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            \"data\" => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n-        $response->assertJsonCount(5);\n+        $response->assertJsonCount(5,\"data\");\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722422534622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5,\"data\");\n     }\n"
                },
                {
                    "date": 1722423465321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            \"data\" => []\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5,\"data\");\n     }\n"
                },
                {
                    "date": 1722423477997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => []\n+            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5,\"data\");\n     }\n"
                },
                {
                    "date": 1722424202029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    // public function test_set_database_config(): void\n-    // {\n-    //     Artisan::call('migrate:refresh --seed --env=\"testing\"');\n-    //     $response = $this->get('/');\n-    //     $response->assertStatus(200);\n-    // }\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n \n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n"
                },
                {
                    "date": 1722424572612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-    }\n+    // public function test_set_database_config(): void\n+    // {\n+    //     Artisan::call('migrate:refresh --seed --env=\"testing\"');\n+    //     $response = $this->get('/');\n+    //     $response->assertStatus(200);\n+    // }\n \n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n"
                },
                {
                    "date": 1722424693605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,14 @@\n {\n     /**\n      * A basic feature test example.\n      */\n-    // public function test_set_database_config(): void\n-    // {\n-    //     Artisan::call('migrate:refresh --seed --env=\"testing\"');\n-    //     $response = $this->get('/');\n-    //     $response->assertStatus(200);\n-    // }\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n \n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n"
                },
                {
                    "date": 1722424732225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n     {\n-        Artisan::call('migrate:refresh --seed --env=\"testing\"');\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n     }\n \n"
                },
                {
                    "date": 1722424815997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n+            \"data\" => ['data'['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5,\"data\");\n     }\n"
                },
                {
                    "date": 1722424828658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => ['data'['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n+            \"data\" => ['data' => [\n+                ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n         $response->assertJsonCount(5,\"data\");\n     }\n"
                },
                {
                    "date": 1722424848673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Tests\\TestCase;\n+use Illuminate\\Support\\Facades\\Artisan;\n+\n+class GatewayTest extends TestCase\n+{\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n+\n+    public function test_get_gateway_list(): void\n+    {\n+        $response = $this->get('/api/gateway/');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n+        ]);\n+        // $response->assertJsonFragment(['name' => 'Rosco']);\n+        $response->assertJsonCount(5,\"data\");\n+    }\n+\n+    public function test_get_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\"data\" =>['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n+\n+    public function test_get_gateway_non_existing_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/9999');\n+        $response->assertStatus(404);\n+    }\n+}\n"
                },
                {
                    "date": 1722424857839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,61 +33,14 @@\n     public function test_get_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([\"data\" =>['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n-        $response->assertJsonFragment(['id' => 1]);\n+        $response->assertJsonStructure([\"data\" =>['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(\"data\" =>['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Tests\\TestCase;\n-use Illuminate\\Support\\Facades\\Artisan;\n-\n-class GatewayTest extends TestCase\n-{\n-    /**\n-     * A basic feature test example.\n-     */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-    }\n-\n-    public function test_get_gateway_list(): void\n-    {\n-        $response = $this->get('/api/gateway/');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            \"data\" => ['data' => [\n-                ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n-        ]);\n-        // $response->assertJsonFragment(['name' => 'Rosco']);\n-        $response->assertJsonCount(5,\"data\");\n-    }\n-\n-    public function test_get_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/1');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure(['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']);\n-        $response->assertJsonFragment(['id' => 1]);\n-    }\n-\n-    public function test_get_gateway_non_existing_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/9999');\n-        $response->assertStatus(404);\n-    }\n-}\n"
                },
                {
                    "date": 1722424864875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\"data\" =>['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(\"data\" =>['id' => 1]);\n+        $response->assertJsonFragment([\"data\" =>['id' => 1]]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722424955047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,20 +23,20 @@\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n-            \"data\" => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]\n+            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n         // $response->assertJsonFragment(['name' => 'Rosco']);\n-        $response->assertJsonCount(5,\"data\");\n+        $response->assertJsonCount(5, 'data');\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n-        $response->assertJsonStructure([\"data\" =>['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment([\"data\" =>['id' => 1]]);\n+        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722424967463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['data' => ['id' => 1]]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425138924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' => ['id' => 1]]);\n+        $response->assertJsonFragment(['data' => ['id' => '1']]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425300140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' => ['id' => '1']]);\n+        $response->assertJsonFragment(['data' => ['id' => ']]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425402533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' => ['id' => ']]);\n+        $response->assertJsonFragment([ => ['id' => 1]]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425413706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment([ => ['id' => 1]]);\n+        $response->assertJsonFragment(['data' ['id' => 1]]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425420314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' ['id' => 1]]);\n+        $response->assertJsonFragment(['data' ]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425427187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data' ]);\n+        $response->assertJsonFragment(['data']['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425458282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['data']['id' => 1]);\n+        $response->assertJsonFragment([ ['id' => 1]]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722425523292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment([ ['id' => 1]]);\n+        $response->assertJsonFragment(['id' => 1,]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n"
                },
                {
                    "date": 1722431735363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,13 +34,47 @@\n     {\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['id' => 1,]);\n+        $response->assertJsonFragment(['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n+\n+    public function test_can_store_gateway()\n+{\n+    // Datos de ejemplo para el nuevo Gateway\n+    $data = [\n+        'serial_number' => '12345678',\n+        'name' => 'Test Gateway',\n+        'IPv4_address' => '192.168.0.1',\n+        'peripheral' => null,\n+    ];\n+\n+    // Hacer la solicitud POST a la ruta de almacenamiento\n+    $response = $this->postJson('/api/gateway', $data);\n+\n+    // Verificar que la respuesta tiene la estructura correcta\n+    $response->assertJsonStructure([\n+        'data' => [\n+            'id',\n+            'serial_number',\n+            'name',\n+            'IPv4_address',\n+            'peripheral',\n+            'created_at',\n+            'updated_at'\n+        ]\n+    ]);\n+\n+    // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n+    $response->assertJsonFragment($data);\n+\n+    // Verificar que la respuesta tiene un código de estado 201 (creado)\n+    $response->assertStatus(201);\n }\n+\n+}\n"
                },
                {
                    "date": 1722431742186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,38 +43,6 @@\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n-    public function test_can_store_gateway()\n-{\n-    // Datos de ejemplo para el nuevo Gateway\n-    $data = [\n-        'serial_number' => '12345678',\n-        'name' => 'Test Gateway',\n-        'IPv4_address' => '192.168.0.1',\n-        'peripheral' => null,\n-    ];\n-\n-    // Hacer la solicitud POST a la ruta de almacenamiento\n-    $response = $this->postJson('/api/gateway', $data);\n-\n-    // Verificar que la respuesta tiene la estructura correcta\n-    $response->assertJsonStructure([\n-        'data' => [\n-            'id',\n-            'serial_number',\n-            'name',\n-            'IPv4_address',\n-            'peripheral',\n-            'created_at',\n-            'updated_at'\n-        ]\n-    ]);\n-\n-    // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-    $response->assertJsonFragment($data);\n-\n-    // Verificar que la respuesta tiene un código de estado 201 (creado)\n-    $response->assertStatus(201);\n+    \n }\n-\n-}\n"
                },
                {
                    "date": 1722431765554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,6 +43,29 @@\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n-    \n+    public function test_can_store_gateway()\n+    {\n+        // Datos de ejemplo para el nuevo Gateway\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => null,\n+        ];\n+\n+        // Hacer la solicitud POST a la ruta de almacenamiento\n+        $response = $this->postJson('/api/gateway', $data);\n+\n+        // Verificar que la respuesta tiene la estructura correcta\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+        ]);\n+\n+        // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n+        $response->assertJsonFragment($data);\n+\n+        // Verificar que la respuesta tiene un código de estado 201 (creado)\n+        $response->assertStatus(201);\n+    }\n }\n"
                },
                {
                    "date": 1722431775208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     }\n \n     public function test_can_store_gateway()\n     {\n-        // Datos de ejemplo para el nuevo Gateway\n+        \n         $data = [\n             'serial_number' => '12345678',\n             'name' => 'Test Gateway',\n             'IPv4_address' => '192.168.0.1',\n"
                },
                {
                    "date": 1722431783751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,20 +45,18 @@\n     }\n \n     public function test_can_store_gateway()\n     {\n-        \n         $data = [\n             'serial_number' => '12345678',\n             'name' => 'Test Gateway',\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => null,\n         ];\n \n-        // Hacer la solicitud POST a la ruta de almacenamiento\n         $response = $this->postJson('/api/gateway', $data);\n \n-        // Verificar que la respuesta tiene la estructura correcta\n+        \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n         ]);\n \n"
                },
                {
                    "date": 1722431789138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,8 @@\n         ];\n \n         $response = $this->postJson('/api/gateway', $data);\n \n-        \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n         ]);\n \n"
                },
                {
                    "date": 1722431952792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-        $response->assertJsonFragment($data);\n+        $response->assertJsonFragment('name' => 'Test Gateway');\n \n         // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n     }\n"
                },
                {
                    "date": 1722431969694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-        $response->assertJsonFragment('name' => 'Test Gateway');\n+        $response->assertJsonFragment(['name' => 'Test Gateway']);\n \n         // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n     }\n"
                },
                {
                    "date": 1722432255663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,5 +64,42 @@\n \n         // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n     }\n+\n+    public function test_can_update_gateway()\n+{\n+    // Crear un Gateway de ejemplo en la base de datos\n+    $gateway = Gateway::factory()->create();\n+\n+    // Datos de ejemplo para la actualización\n+    $updatedData = [\n+        'serial_number' => '87654321',\n+        'name' => 'Updated Gateway',\n+        'IPv4_address' => '192.168.0.2',\n+        'peripheral' => null,\n+    ];\n+\n+    // Hacer la solicitud PUT a la ruta de actualización\n+    $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n+\n+    // Verificar que la respuesta tiene la estructura correcta\n+    $response->assertJsonStructure([\n+        'data' => [\n+            'id',\n+            'serial_number',\n+            'name',\n+            'IPv4_address',\n+            'peripheral',\n+            'created_at',\n+            'updated_at'\n+        ]\n+    ]);\n+\n+    // Verificar que el fragmento de datos actualizado está presente en la respuesta\n+    $response->assertJsonFragment($updatedData);\n+\n+    // Verificar que la respuesta tiene un código de estado 200 (OK)\n+    $response->assertStatus(200);\n }\n+\n+}\n"
                },
                {
                    "date": 1722432293820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n use Illuminate\\Support\\Facades\\Artisan;\n \n+\n class GatewayTest extends TestCase\n {\n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1722432341700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,10 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n use Illuminate\\Support\\Facades\\Artisan;\n+use App\\Models\\Gateway;\n \n-\n class GatewayTest extends TestCase\n {\n     /**\n      * A basic feature test example.\n@@ -67,40 +67,31 @@\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_gateway()\n-{\n-    // Crear un Gateway de ejemplo en la base de datos\n-    $gateway = Gateway::factory()->create();\n+    {\n+        // Crear un Gateway de ejemplo en la base de datos\n+        $gateway = Gateway::factory()->create();\n \n-    // Datos de ejemplo para la actualización\n-    $updatedData = [\n-        'serial_number' => '87654321',\n-        'name' => 'Updated Gateway',\n-        'IPv4_address' => '192.168.0.2',\n-        'peripheral' => null,\n-    ];\n+        // Datos de ejemplo para la actualización\n+        $updatedData = [\n+            'serial_number' => '87654321',\n+            'name' => 'Updated Gateway',\n+            'IPv4_address' => '192.168.0.2',\n+            'peripheral' => null,\n+        ];\n \n-    // Hacer la solicitud PUT a la ruta de actualización\n-    $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n+        // Hacer la solicitud PUT a la ruta de actualización\n+        $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n \n-    // Verificar que la respuesta tiene la estructura correcta\n-    $response->assertJsonStructure([\n-        'data' => [\n-            'id',\n-            'serial_number',\n-            'name',\n-            'IPv4_address',\n-            'peripheral',\n-            'created_at',\n-            'updated_at'\n-        ]\n-    ]);\n+        // Verificar que la respuesta tiene la estructura correcta\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+        ]);\n \n-    // Verificar que el fragmento de datos actualizado está presente en la respuesta\n-    $response->assertJsonFragment($updatedData);\n+        // Verificar que el fragmento de datos actualizado está presente en la respuesta\n+        $response->assertJsonFragment($updatedData);\n \n-    // Verificar que la respuesta tiene un código de estado 200 (OK)\n-    $response->assertStatus(200);\n+        // Verificar que la respuesta tiene un código de estado 200 (OK)\n+        $response->assertStatus(200);\n+    }\n }\n-\n-}\n"
                },
                {
                    "date": 1722432350769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-        $response->assertJsonFragment(['name' => 'Test Gateway']);\n+        $response->assertJsonFragment([$data);\n \n         // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n     }\n"
                },
                {
                    "date": 1722432752925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,29 +44,29 @@\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n-    public function test_can_store_gateway()\n-    {\n-        $data = [\n-            'serial_number' => '12345678',\n-            'name' => 'Test Gateway',\n-            'IPv4_address' => '192.168.0.1',\n-            'peripheral' => null,\n-        ];\n+    // public function test_can_store_gateway()\n+    // {\n+    //     $data = [\n+    //         'serial_number' => '12345678',\n+    //         'name' => 'Test Gateway',\n+    //         'IPv4_address' => '192.168.0.1',\n+    //         'peripheral' => null,\n+    //     ];\n \n-        $response = $this->postJson('/api/gateway', $data);\n+    //     $response = $this->postJson('/api/gateway', $data);\n \n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-        ]);\n+    //     $response->assertJsonStructure([\n+    //         'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+    //     ]);\n \n-        // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-        $response->assertJsonFragment([$data);\n+    //     // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n+    //     $response->assertJsonFragment($data);\n \n-        // Verificar que la respuesta tiene un código de estado 201 (creado)\n-        $response->assertStatus(201);\n-    }\n+    //     // Verificar que la respuesta tiene un código de estado 201 (creado)\n+    //     $response->assertStatus(201);\n+    // }\n \n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n"
                },
                {
                    "date": 1722432761105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,10 @@\n         $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            '',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment($updatedData);\n"
                },
                {
                    "date": 1722432766780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n-            '',\n+            'message' => 'Gateway updated successfully',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment($updatedData);\n"
                },
                {
                    "date": 1722433034385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n+        $gateway = Gateway::factory()->create();\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -84,9 +85,9 @@\n         $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message' => 'Gateway updated successfully',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n"
                },
                {
                    "date": 1722433040799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n     public function test_get_gateway_detail(): void\n     {\n         $gateway = Gateway::factory()->create();\n-        $response = $this->get('/api/gateway/1');\n+        $response = $this->get('/api/gateway/{$gateway->id}');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433050256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n \n     public function test_get_gateway_detail(): void\n     {\n         $gateway = Gateway::factory()->create();\n-        $response = $this->get('/api/gateway/{$gateway->id}');\n+        $response = $this->get(\"/api/gateway/{$gateway->id}\");\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433078673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $gateway = Gateway::factory()->create();\n-        $response = $this->get(\"/api/gateway/{$gateway->id}\");\n+        $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433138401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,9 +80,9 @@\n             'peripheral' => null,\n         ];\n \n         // Hacer la solicitud PUT a la ruta de actualización\n-        $response = $this->putJson(\"/api/gateway/{$gateway->id}\", $updatedData);\n+        $response = $this->putJson(\"/api/gateway/{1}\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n"
                },
                {
                    "date": 1722433143675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n-        $gateway = Gateway::factory()->create();\n+        // $gateway = Gateway::factory()->create();\n \n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '87654321',\n@@ -80,9 +80,9 @@\n             'peripheral' => null,\n         ];\n \n         // Hacer la solicitud PUT a la ruta de actualización\n-        $response = $this->putJson(\"/api/gateway/{1}\", $updatedData);\n+        $response = $this->putJson(\"/api/gateway/1\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n"
                },
                {
                    "date": 1722433287270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,8 @@\n \n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '87654321',\n-            'name' => 'Updated Gateway',\n             'IPv4_address' => '192.168.0.2',\n             'peripheral' => null,\n         ];\n \n"
                },
                {
                    "date": 1722433312119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,9 @@\n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '87654321',\n             'IPv4_address' => '192.168.0.2',\n-            'peripheral' => null,\n+            'name' => 'Updated Gateway',\n         ];\n \n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/1\", $updatedData);\n"
                },
                {
                    "date": 1722433318859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         // $gateway = Gateway::factory()->create();\n \n         // Datos de ejemplo para la actualización\n         $updatedData = [\n-            'serial_number' => '87654321',\n+            'serial_number' => '888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n \n"
                },
                {
                    "date": 1722433377369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         // $gateway = Gateway::factory()->create();\n \n         // Datos de ejemplo para la actualización\n         $updatedData = [\n-            'serial_number' => '888888',\n+            'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n \n"
                },
                {
                    "date": 1722433433079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n \n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n-        // $gateway = Gateway::factory()->create();\n+        $gateway = Gateway::factory()->create();\n \n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '88888888',\n"
                },
                {
                    "date": 1722433494754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n         $gateway = Gateway::factory()->create();\n-\n+$id\n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n"
                },
                {
                    "date": 1722433521560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,11 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n+\n+        $gateway = Gateway::factory()->create();\n+    $id = $gateway->id;\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -70,9 +73,9 @@\n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n         $gateway = Gateway::factory()->create();\n-$id\n+    $id = $gateway->id;\n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n"
                },
                {
                    "date": 1722433528609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,10 @@\n     public function test_get_gateway_detail(): void\n     {\n \n         $gateway = Gateway::factory()->create();\n-    $id = $gateway->id;\n-        $response = $this->get('/api/gateway/1');\n+        $id = $gateway->id;\n+        $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433542193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     {\n \n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n-        $response = $this->get('/api/gateway/');\n+        $response = $this->get('/api/gateway/'.$id);\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433561398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,10 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-\n-        $gateway = Gateway::factory()->create();\n-        $id = $gateway->id;\n-        $response = $this->get('/api/gateway/'.$id);\n+        \n+        $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1722433613056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        \n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -80,9 +79,9 @@\n             'name' => 'Updated Gateway',\n         ];\n \n         // Hacer la solicitud PUT a la ruta de actualización\n-        $response = $this->putJson(\"/api/gateway/1\", $updatedData);\n+        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n"
                },
                {
                    "date": 1722433782826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,12 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message' => 'Gateway updated successfully',\n-        ]);\n+        // $response->assertJsonStructure([\n+        //     'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+        //     'message' => 'Gateway updated successfully',\n+        // ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment($updatedData);\n \n"
                },
                {
                    "date": 1722433813293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n         //     'message' => 'Gateway updated successfully',\n         // ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n-        $response->assertJsonFragment($updatedData);\n+        $response->assertJsonFragment(['serial_number' => '88888888']);\n \n         // Verificar que la respuesta tiene un código de estado 200 (OK)\n         $response->assertStatus(200);\n     }\n"
                },
                {
                    "date": 1722433824636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,12 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        // $response->assertJsonStructure([\n-        //     'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-        //     'message' => 'Gateway updated successfully',\n-        // ]);\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message' => 'Gateway updated successfully',\n+        ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment(['serial_number' => '88888888']);\n \n"
                },
                {
                    "date": 1722433897653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n         $gateway = Gateway::factory()->create();\n-    $id = $gateway->id;\n+        $id = $gateway->id;\n         // Datos de ejemplo para la actualización\n         $updatedData = [\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n"
                },
                {
                    "date": 1722433911775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        $response->assertJsonStructure([\n+        $response->assertJsonStructure(\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message' => 'Gateway updated successfully',\n         ]);\n \n"
                },
                {
                    "date": 1722433982879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        $response->assertJsonStructure(\n+        $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message' => 'Gateway updated successfully',\n         ]);\n \n"
                },
                {
                    "date": 1722433992599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=, 'created_at', 'updated_at'],\n             'message' => 'Gateway updated successfully',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n"
                },
                {
                    "date": 1722433997809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=, 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n             'message' => 'Gateway updated successfully',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n"
                },
                {
                    "date": 1722434389833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,12 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n-            'message' => 'Gateway updated successfully',\n-        ]);\n+        // $response->assertJsonStructure([\n+        //     'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n+        //     'message' => 'Gateway updated successfully',\n+        // ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment(['serial_number' => '88888888']);\n \n"
                },
                {
                    "date": 1722434397085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,12 +82,12 @@\n         // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n-        // $response->assertJsonStructure([\n-        //     'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n-        //     'message' => 'Gateway updated successfully',\n-        // ]);\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n+            'message' => 'Gateway updated successfully',\n+        ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment(['serial_number' => '88888888']);\n \n"
                },
                {
                    "date": 1722434487739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n-            'message' => 'Gateway updated successfully',\n+            'message',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment(['serial_number' => '88888888']);\n"
                },
                {
                    "date": 1722434499878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,29 +44,29 @@\n         $response = $this->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n-    // public function test_can_store_gateway()\n-    // {\n-    //     $data = [\n-    //         'serial_number' => '12345678',\n-    //         'name' => 'Test Gateway',\n-    //         'IPv4_address' => '192.168.0.1',\n-    //         'peripheral' => null,\n-    //     ];\n+    public function test_can_store_gateway()\n+    {\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => null,\n+        ];\n \n-    //     $response = $this->postJson('/api/gateway', $data);\n+        $response = $this->postJson('/api/gateway', $data);\n \n-    //     $response->assertJsonStructure([\n-    //         'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-    //     ]);\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+        ]);\n \n-    //     // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n-    //     $response->assertJsonFragment($data);\n+        // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n+        $response->assertJsonFragment($data);\n \n-    //     // Verificar que la respuesta tiene un código de estado 201 (creado)\n-    //     $response->assertStatus(201);\n-    // }\n+        // Verificar que la respuesta tiene un código de estado 201 (creado)\n+        $response->assertStatus(201);\n+    }\n \n     public function test_can_update_gateway()\n     {\n         // Crear un Gateway de ejemplo en la base de datos\n"
                },
                {
                    "date": 1722434508282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,10 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            ,\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n         $response->assertJsonFragment($data);\n"
                },
                {
                    "date": 1722434513516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n-            ,\n+            'message' => 'Gateway created successfully',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n         $response->assertJsonFragment($data);\n"
                },
                {
                    "date": 1722434520949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n-            'message' => 'Gateway created successfully',\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n         $response->assertJsonFragment($data);\n"
                },
                {
                    "date": 1722434877743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n"
                },
                {
                    "date": 1722435152580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'[, 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n"
                },
                {
                    "date": 1722435163905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'[, 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n"
                },
                {
                    "date": 1722435193127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[],, 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n"
                },
                {
                    "date": 1722435200929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,15 +50,15 @@\n         $data = [\n             'serial_number' => '12345678',\n             'name' => 'Test Gateway',\n             'IPv4_address' => '192.168.0.1',\n-            'peripheral' => null,\n+            'peripheral' => [null],\n         ];\n \n         $response = $this->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[],, 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n"
                },
                {
                    "date": 1722435266598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n+        \n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -50,9 +51,9 @@\n         $data = [\n             'serial_number' => '12345678',\n             'name' => 'Test Gateway',\n             'IPv4_address' => '192.168.0.1',\n-            'peripheral' => [null],\n+            'peripheral' => [],\n         ];\n \n         $response = $this->postJson('/api/gateway', $data);\n \n"
                },
                {
                    "date": 1722435281124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        \n+        $this->withoutExceptionHandling();\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n"
                },
                {
                    "date": 1722435316659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $this->withoutExceptionHandling();\n+        \n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n"
                },
                {
                    "date": 1722435356503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        \n+\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -85,9 +85,9 @@\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral'=>[], 'created_at', 'updated_at'],\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n"
                },
                {
                    "date": 1722435373949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n             'message',\n         ]);\n \n         // Verificar que el fragmento de datos actualizado está presente en la respuesta\n-        $response->assertJsonFragment(['serial_number' => '88888888']);\n+        $response->assertJsonFragment($updatedData);\n \n         // Verificar que la respuesta tiene un código de estado 200 (OK)\n         $response->assertStatus(200);\n     }\n"
                },
                {
                    "date": 1722435385244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n-        // Verificar que el fragmento de datos que enviamos está presente en la respuesta\n         $response->assertJsonFragment($data);\n \n         // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n"
                },
                {
                    "date": 1722435390827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,10 +62,8 @@\n             'message',\n         ]);\n \n         $response->assertJsonFragment($data);\n-\n-        // Verificar que la respuesta tiene un código de estado 201 (creado)\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_gateway()\n@@ -78,13 +76,10 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-\n-        // Hacer la solicitud PUT a la ruta de actualización\n         $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n-        // Verificar que la respuesta tiene la estructura correcta\n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1722435397885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,10 +66,8 @@\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_gateway()\n-    {\n-        // Crear un Gateway de ejemplo en la base de datos\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n         // Datos de ejemplo para la actualización\n         $updatedData = [\n@@ -83,11 +81,9 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n-        // Verificar que el fragmento de datos actualizado está presente en la respuesta\n         $response->assertJsonFragment($updatedData);\n \n-        // Verificar que la respuesta tiene un código de estado 200 (OK)\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1722435408416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n-        // $response->assertJsonFragment(['name' => 'Rosco']);\n+        \n         $response->assertJsonCount(5, 'data');\n     }\n \n     public function test_get_gateway_detail(): void\n@@ -66,11 +66,13 @@\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_gateway()\n+    {\n+\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n-        // Datos de ejemplo para la actualización\n+\n         $updatedData = [\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n"
                },
                {
                    "date": 1722435419267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n-        \n+\n         $response->assertJsonCount(5, 'data');\n     }\n \n     public function test_get_gateway_detail(): void\n@@ -84,8 +84,7 @@\n             'message',\n         ]);\n \n         $response->assertJsonFragment($updatedData);\n-\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1725129322114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     {\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n-    }\n+    } \n \n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n"
                },
                {
                    "date": 1725129454656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,12 @@\n     {\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n-    } \n \n+        AdditionalDataRequest::setMethod($request->is('api/*') ? 'API' : $methodName);\n+    }\n+\n     public function test_get_gateway_list(): void\n     {\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n"
                },
                {
                    "date": 1725129494753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n <?php\n \n namespace Tests\\Feature;\n \n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n+use App\\Models\\Gateway;\n+use App\\Facades\\AdditionalDataRequest;\n use Illuminate\\Support\\Facades\\Artisan;\n-use App\\Models\\Gateway;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n class GatewayTest extends TestCase\n {\n     /**\n"
                },
                {
                    "date": 1725129504675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n \n-        AdditionalDataRequest::setMethod($request->is('api/*') ? 'API' : $methodName);\n+        AdditionalDataRequest::setMethod(\"API\");\n     }\n \n     public function test_get_gateway_list(): void\n     {\n"
                },
                {
                    "date": 1725129678189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,11 @@\n     }\n \n     public function test_get_gateway_list(): void\n     {\n+\n+        $token = $user->createToken('TestToken')->plainTextToken;\n+        \n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n"
                },
                {
                    "date": 1725129719108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,16 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n+        User::factory()->create([\n+            'name' => 'Tester User',\n+            'email' => 'tester@example.com',\n+            'password' => '12345678',\n+        ]);\n+        \n         $token = $user->createToken('TestToken')->plainTextToken;\n-        \n+\n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n"
                },
                {
                    "date": 1725129739002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,14 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        User::factory()->create([\n+        $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n         ]);\n-        \n+\n         $token = $user->createToken('TestToken')->plainTextToken;\n \n         $response = $this->get('/api/gateway/');\n         $response->assertStatus(200);\n"
                },
                {
                    "date": 1725129759740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,11 @@\n         ]);\n \n         $token = $user->createToken('TestToken')->plainTextToken;\n \n-        $response = $this->get('/api/gateway/');\n+        $response = $this->withHeaders([\n+            'Authorization' => 'Bearer ' . $token,  // Agrega el token de acceso en el encabezado\n+        ])->get('/api/gateway/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n"
                },
                {
                    "date": 1725129766820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,11 @@\n \n         $token = $user->createToken('TestToken')->plainTextToken;\n \n         $response = $this->withHeaders([\n-            'Authorization' => 'Bearer ' . $token,  // Agrega el token de acceso en el encabezado\n+            'Authorization' => 'Bearer ' . $token,\n         ])->get('/api/gateway/');\n+        \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n"
                },
                {
                    "date": 1725129772739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,12 +33,10 @@\n         ]);\n \n         $token = $user->createToken('TestToken')->plainTextToken;\n \n-        $response = $this->withHeaders([\n-            'Authorization' => 'Bearer ' . $token,\n-        ])->get('/api/gateway/');\n-        \n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token,        ])->get('/api/gateway/');\n+\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n         ]);\n"
                },
                {
                    "date": 1725129780782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         ]);\n \n         $token = $user->createToken('TestToken')->plainTextToken;\n \n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token,        ])->get('/api/gateway/');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token,])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n"
                },
                {
                    "date": 1725129805950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n+        \\App\\Models\\User\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129812079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User\n+        \\App\\Models\\User::fid\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129819016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::fid\n+        \\App\\Models\\User::find\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129829429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::find\n+        \\App\\Models\\User::findN()\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129835239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::findN()\n+        \\App\\Models\\User::findB()\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129861386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::findB()\n+        \\App\\Models\\User::findByName()\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129874949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::findByName()\n+        \\App\\Models\\User::findByName('Tester User');\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129880823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        \\App\\Models\\User::findByName('Tester User');\n+        $user =\\App\\Models\\User::findByName('Tester User');\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129886066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,10 @@\n     public function test_get_gateway_list(): void\n     {\n \n         $user =\\App\\Models\\User::findByName('Tester User');\n+\n+        if\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129894092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,10 @@\n     {\n \n         $user =\\App\\Models\\User::findByName('Tester User');\n \n-        if\n+        if(!$user)\n+        {}\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n"
                },
                {
                    "date": 1725129901373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,15 @@\n \n         $user =\\App\\Models\\User::findByName('Tester User');\n \n         if(!$user)\n-        {}\n+        {\n         $user = \\App\\Models\\User::factory()->create([\n             'name' => 'Tester User',\n             'email' => 'tester@example.com',\n             'password' => '12345678',\n         ]);\n-\n+    }\n         $token = $user->createToken('TestToken')->plainTextToken;\n \n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token,])->get('/api/gateway/');\n \n"
                },
                {
                    "date": 1725130006422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,20 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n class GatewayTest extends TestCase\n {\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        // Crea un usuario de prueba\n+        $this->user = User::factory()->create();\n+\n+        // Genera un token de acceso personal para el usuario de prueba\n+        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+    }\n+    \n     /**\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n@@ -19,27 +31,25 @@\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n \n-        AdditionalDataRequest::setMethod(\"API\");\n+        AdditionalDataRequest::setMethod('API');\n     }\n \n     public function test_get_gateway_list(): void\n     {\n+        $user = \\App\\Models\\User::findByName('Tester User');\n \n-        $user =\\App\\Models\\User::findByName('Tester User');\n-\n-        if(!$user)\n-        {\n-        $user = \\App\\Models\\User::factory()->create([\n-            'name' => 'Tester User',\n-            'email' => 'tester@example.com',\n-            'password' => '12345678',\n-        ]);\n-    }\n+        if (!$user) {\n+            $user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n         $token = $user->createToken('TestToken')->plainTextToken;\n \n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token,])->get('/api/gateway/');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n@@ -49,9 +59,8 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-\n         $response = $this->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n@@ -84,9 +93,8 @@\n     }\n \n     public function test_can_update_gateway()\n     {\n-\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n         $updatedData = [\n"
                },
                {
                    "date": 1725130016278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,14 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        // Crea un usuario de prueba\n         $this->user = User::factory()->create();\n \n         // Genera un token de acceso personal para el usuario de prueba\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n     }\n-    \n+\n     /**\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n@@ -36,19 +35,10 @@\n     }\n \n     public function test_get_gateway_list(): void\n     {\n-        $user = \\App\\Models\\User::findByName('Tester User');\n+       \n \n-        if (!$user) {\n-            $user = \\App\\Models\\User::factory()->create([\n-                'name' => 'Tester User',\n-                'email' => 'tester@example.com',\n-                'password' => '12345678',\n-            ]);\n-        }\n-        $token = $user->createToken('TestToken')->plainTextToken;\n-\n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n"
                },
                {
                    "date": 1725130026185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,18 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = User::factory()->create();\n+        $user = \\App\\Models\\User::findByName('Tester User');\n \n-        // Genera un token de acceso personal para el usuario de prueba\n-        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+        if (!$user) {\n+            $user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n+        $token = $user->createToken('TestToken')->plainTextToken;\n     }\n \n     /**\n      * A basic feature test example.\n@@ -35,10 +41,10 @@\n     }\n \n     public function test_get_gateway_list(): void\n     {\n-       \n \n+\n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n"
                },
                {
                    "date": 1725130036277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,18 +15,18 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $user = \\App\\Models\\User::findByName('Tester User');\n+         $user = \\App\\Models\\User::findByName('Tester User');\n \n         if (!$user) {\n             $user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n             ]);\n         }\n-        $token = $user->createToken('TestToken')->plainTextToken;\n+        $this->token = $user->createToken('TestToken')->plainTextToken;\n     }\n \n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1725130044617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,12 @@\n \n class GatewayTest extends TestCase\n {\n \n+\n+    protected $user;\n+    protected $token;\n+    \n     protected function setUp(): void\n     {\n         parent::setUp();\n \n"
                },
                {
                    "date": 1725130059549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,11 @@\n \n class GatewayTest extends TestCase\n {\n \n-\n     protected $user;\n     protected $token;\n-    \n+\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n"
                },
                {
                    "date": 1725130069399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-         $user = \\App\\Models\\User::findByName('Tester User');\n+        $this->user = \\App\\Models\\User::findByName('Tester User');\n \n         if (!$user) {\n             $user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n"
                },
                {
                    "date": 1725130076650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         parent::setUp();\n \n         $this->user = \\App\\Models\\User::findByName('Tester User');\n \n-        if (!$user) {\n+        if (!) {\n             $user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n"
                },
                {
                    "date": 1725130082385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         parent::setUp();\n \n         $this->user = \\App\\Models\\User::findByName('Tester User');\n \n-        if (!) {\n+        if (empty) {\n             $user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n"
                },
                {
                    "date": 1725130091640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n         parent::setUp();\n \n         $this->user = \\App\\Models\\User::findByName('Tester User');\n \n-        if (empty) {\n-            $user = \\App\\Models\\User::factory()->create([\n+        if (empty($this->user)) {\n+            $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n             ]);\n"
                },
                {
                    "date": 1725130101138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n             ]);\n         }\n-        $this->token = $user->createToken('TestToken')->plainTextToken;\n+        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n     }\n \n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1725130113071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use Tests\\TestCase;\n+use App\\Models\\Gateway;\n+use App\\Facades\\AdditionalDataRequest;\n+use Illuminate\\Support\\Facades\\Artisan;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+\n+class GatewayTest extends TestCase\n+{\n+\n+    protected $user;\n+    protected $token;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->user = \\App\\Models\\User::findByName('Tester User');\n+\n+        if (empty($this->user)) {\n+            $this->user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n+        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+    }\n+\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+\n+        AdditionalDataRequest::setMethod('API');\n+    }\n+\n+    public function test_get_gateway_list(): void\n+    {\n+\n+\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/');\n+\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n+        ]);\n+\n+        $response->assertJsonCount(5, 'data');\n+    }\n+\n+    public function test_get_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n+\n+    public function test_get_gateway_non_existing_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/9999');\n+        $response->assertStatus(404);\n+    }\n+\n+    public function test_can_store_gateway()\n+    {\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => [],\n+        ];\n+\n+        $response = $this->postJson('/api/gateway', $data);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n+\n+    public function test_can_update_gateway()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n+\n+        $updatedData = [\n+            'serial_number' => '88888888',\n+            'IPv4_address' => '192.168.0.2',\n+            'name' => 'Updated Gateway',\n+        ];\n+        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n+    }\n+}\n"
                },
                {
                    "date": 1725130233100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = \\App\\Models\\User::findByName('Tester User');\n+        $this->user = \\App\\Models\\User::findName('Tester User');\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n@@ -45,9 +45,8 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-\n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n@@ -111,118 +110,4 @@\n         $response->assertJsonFragment($updatedData);\n         $response->assertStatus(200);\n     }\n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use Tests\\TestCase;\n-use App\\Models\\Gateway;\n-use App\\Facades\\AdditionalDataRequest;\n-use Illuminate\\Support\\Facades\\Artisan;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-\n-class GatewayTest extends TestCase\n-{\n-\n-    protected $user;\n-    protected $token;\n-\n-    protected function setUp(): void\n-    {\n-        parent::setUp();\n-\n-        $this->user = \\App\\Models\\User::findByName('Tester User');\n-\n-        if (empty($this->user)) {\n-            $this->user = \\App\\Models\\User::factory()->create([\n-                'name' => 'Tester User',\n-                'email' => 'tester@example.com',\n-                'password' => '12345678',\n-            ]);\n-        }\n-        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n-    }\n-\n-    /**\n-     * A basic feature test example.\n-     */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-\n-        AdditionalDataRequest::setMethod('API');\n-    }\n-\n-    public function test_get_gateway_list(): void\n-    {\n-\n-\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $token])->get('/api/gateway/');\n-\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n-        ]);\n-\n-        $response->assertJsonCount(5, 'data');\n-    }\n-\n-    public function test_get_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/1');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['id' => 1]);\n-    }\n-\n-    public function test_get_gateway_non_existing_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/9999');\n-        $response->assertStatus(404);\n-    }\n-\n-    public function test_can_store_gateway()\n-    {\n-        $data = [\n-            'serial_number' => '12345678',\n-            'name' => 'Test Gateway',\n-            'IPv4_address' => '192.168.0.1',\n-            'peripheral' => [],\n-        ];\n-\n-        $response = $this->postJson('/api/gateway', $data);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($data);\n-        $response->assertStatus(201);\n-    }\n-\n-    public function test_can_update_gateway()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $id = $gateway->id;\n-\n-        $updatedData = [\n-            'serial_number' => '88888888',\n-            'IPv4_address' => '192.168.0.2',\n-            'name' => 'Updated Gateway',\n-        ];\n-        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($updatedData);\n-        $response->assertStatus(200);\n-    }\n-}\n"
                },
                {
                    "date": 1725130473059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use Tests\\TestCase;\n+use App\\Models\\Gateway;\n+use App\\Facades\\AdditionalDataRequest;\n+use Illuminate\\Support\\Facades\\Artisan;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+\n+class GatewayTest extends TestCase\n+{\n+\n+    protected $user;\n+    protected $token;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->user = \\App\\Models\\User::e('Tester User');\n+\n+        if (empty($this->user)) {\n+            $this->user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n+        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+    }\n+\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+\n+        AdditionalDataRequest::setMethod('API');\n+    }\n+\n+    public function test_get_gateway_list(): void\n+    {\n+\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/');\n+\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n+        ]);\n+\n+        $response->assertJsonCount(5, 'data');\n+    }\n+\n+    public function test_get_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n+\n+    public function test_get_gateway_non_existing_gateway_detail(): void\n+    {\n+        $response = $this->get('/api/gateway/9999');\n+        $response->assertStatus(404);\n+    }\n+\n+    public function test_can_store_gateway()\n+    {\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => [],\n+        ];\n+\n+        $response = $this->postJson('/api/gateway', $data);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n+\n+    public function test_can_update_gateway()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n+\n+        $updatedData = [\n+            'serial_number' => '88888888',\n+            'IPv4_address' => '192.168.0.2',\n+            'name' => 'Updated Gateway',\n+        ];\n+        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n+    }\n+}\n"
                },
                {
                    "date": 1725130478478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = \\App\\Models\\User::e('Tester User');\n+        $this->user = \\App\\Models\\User::wh('Tester User');\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n@@ -110,117 +110,4 @@\n         $response->assertJsonFragment($updatedData);\n         $response->assertStatus(200);\n     }\n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use Tests\\TestCase;\n-use App\\Models\\Gateway;\n-use App\\Facades\\AdditionalDataRequest;\n-use Illuminate\\Support\\Facades\\Artisan;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-\n-class GatewayTest extends TestCase\n-{\n-\n-    protected $user;\n-    protected $token;\n-\n-    protected function setUp(): void\n-    {\n-        parent::setUp();\n-\n-        $this->user = \\App\\Models\\User::findName('Tester User');\n-\n-        if (empty($this->user)) {\n-            $this->user = \\App\\Models\\User::factory()->create([\n-                'name' => 'Tester User',\n-                'email' => 'tester@example.com',\n-                'password' => '12345678',\n-            ]);\n-        }\n-        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n-    }\n-\n-    /**\n-     * A basic feature test example.\n-     */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-\n-        AdditionalDataRequest::setMethod('API');\n-    }\n-\n-    public function test_get_gateway_list(): void\n-    {\n-\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/');\n-\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n-        ]);\n-\n-        $response->assertJsonCount(5, 'data');\n-    }\n-\n-    public function test_get_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/1');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['id' => 1]);\n-    }\n-\n-    public function test_get_gateway_non_existing_gateway_detail(): void\n-    {\n-        $response = $this->get('/api/gateway/9999');\n-        $response->assertStatus(404);\n-    }\n-\n-    public function test_can_store_gateway()\n-    {\n-        $data = [\n-            'serial_number' => '12345678',\n-            'name' => 'Test Gateway',\n-            'IPv4_address' => '192.168.0.1',\n-            'peripheral' => [],\n-        ];\n-\n-        $response = $this->postJson('/api/gateway', $data);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($data);\n-        $response->assertStatus(201);\n-    }\n-\n-    public function test_can_update_gateway()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $id = $gateway->id;\n-\n-        $updatedData = [\n-            'serial_number' => '88888888',\n-            'IPv4_address' => '192.168.0.2',\n-            'name' => 'Updated Gateway',\n-        ];\n-        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($updatedData);\n-        $response->assertStatus(200);\n-    }\n-}\n"
                },
                {
                    "date": 1725130490530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = \\App\\Models\\User::wh('Tester User');\n+        $this->user = \\App\\Models\\User::where('name', $name)->first()();\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n"
                },
                {
                    "date": 1725130497082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = \\App\\Models\\User::where('name', $name)->first()();\n+        $this->user = \\App\\Models\\User::where('name', 'Tester User')->first();\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n"
                },
                {
                    "date": 1725130526200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1725130546406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n@@ -78,9 +78,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725130555994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725130799335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,8 @@\n     {\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n-\n-        AdditionalDataRequest::setMethod('API');\n     }\n \n     public function test_get_gateway_list(): void\n     {\n"
                },
                {
                    "date": 1725130806280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,11 @@\n                 'password' => '12345678',\n             ]);\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+\n+\n+        AdditionalDataRequest::setMethod('API');\n     }\n \n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1725178162531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n             ]);\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n \n-\n         AdditionalDataRequest::setMethod('API');\n     }\n \n     /**\n@@ -110,5 +109,27 @@\n \n         $response->assertJsonFragment($updatedData);\n         $response->assertStatus(200);\n     }\n+\n+\n+    public function test_can_update_gateway()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n+\n+        $updatedData = [\n+            'serial_number' => '88888888',\n+            'IPv4_address' => '192.168.0.2',\n+            'name' => 'Updated Gateway',\n+        ];\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n+    }\n }\n"
                },
                {
                    "date": 1725178182707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n         $response->assertStatus(200);\n     }\n \n \n-    public function test_can_update_gateway()\n+    public function test_can_destroy_gateway()\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n"
                },
                {
                    "date": 1725178245544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725178276678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725178288614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\", $uptedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725178295004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,14 +116,9 @@\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $updatedData = [\n-            'serial_number' => '88888888',\n-            'IPv4_address' => '192.168.0.2',\n-            'name' => 'Updated Gateway',\n-        ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\", $uptedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725178334900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,8 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment($updatedData);\n+        $response->assertJsonFragment($response);\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1725178371695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,8 +123,8 @@\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment($response);\n+\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1725178481748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,12 +119,11 @@\n \n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'data' => [,\n             'message',\n         ]);\n \n-\n         $response->assertStatus(200);\n     }\n }\n"
                },
                {
                    "date": 1725178487055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,9 +119,9 @@\n \n         $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n-            'data' => [,\n+            'data' => [],\n             'message',\n         ]);\n \n         $response->assertStatus(200);\n"
                },
                {
                    "date": 1725178524745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,8 @@\n         $response->assertJsonFragment($updatedData);\n         $response->assertStatus(200);\n     }\n \n-\n     public function test_can_destroy_gateway()\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n"
                },
                {
                    "date": 1725261676475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace Tests\\Feature;\n \n use Tests\\TestCase;\n use App\\Models\\Gateway;\n-use App\\Facades\\AdditionalDataRequest;\n+// use App\\Facades\\AdditionalDataRequest;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n"
                },
                {
                    "date": 1725261682567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n // use App\\Facades\\AdditionalDataRequest;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+use Anasa\\ResponseStrategy\\Facades\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n \n"
                },
                {
                    "date": 1725261851896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n namespace Tests\\Feature;\n \n use Tests\\TestCase;\n use App\\Models\\Gateway;\n-// use App\\Facades\\AdditionalDataRequest;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Anasa\\ResponseStrategy\\Facades\\AdditionalDataRequest;\n"
                },
                {
                    "date": 1725281278722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n use App\\Models\\Gateway;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Anasa\\ResponseStrategy\\Facades\\AdditionalDataRequest;\n+use Anasa\\ResponseStrategyAdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n \n"
                },
                {
                    "date": 1725281305469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n use App\\Models\\Gateway;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Anasa\\ResponseStrategyAdditionalDataRequest;\n+use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n \n@@ -29,8 +29,9 @@\n             ]);\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n \n+        $service = AdditionalDataRequest::getInstance();\n         AdditionalDataRequest::setMethod('API');\n     }\n \n     /**\n"
                },
                {
                    "date": 1725281311479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n \n         $service = AdditionalDataRequest::getInstance();\n-        AdditionalDataRequest::setMethod('API');\n+        $service->setMethod('API');\n     }\n \n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1727211410529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n                 'email' => 'tester@example.com',\n                 'password' => '12345678',\n             ]);\n         }\n-        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+        $this->token = 'Bearer '$this->user->createToken('TestToken')->plainTextToken;\n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n"
                },
                {
                    "date": 1727211435975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use Tests\\TestCase;\n+use App\\Models\\Gateway;\n+use Illuminate\\Support\\Facades\\Artisan;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n+\n+class GatewayTest extends TestCase\n+{\n+\n+    protected $user;\n+    protected $token;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->user = \\App\\Models\\User::where('name', 'Tester User')->first();\n+\n+        if (empty($this->user)) {\n+            $this->user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n+        $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n+\n+        $service = AdditionalDataRequest::getInstance();\n+        $service->setMethod('API');\n+    }\n+\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n+\n+    public function test_get_gateway_list(): void\n+    {\n+\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/');\n+\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n+        ]);\n+\n+        $response->assertJsonCount(5, 'data');\n+    }\n+\n+    public function test_get_gateway_detail(): void\n+    {\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n+\n+    public function test_get_gateway_non_existing_gateway_detail(): void\n+    {\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/9999');\n+        $response->assertStatus(404);\n+    }\n+\n+    public function test_can_store_gateway()\n+    {\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => [],\n+        ];\n+\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/gateway', $data);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n+\n+    public function test_can_update_gateway()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n+\n+        $updatedData = [\n+            'serial_number' => '88888888',\n+            'IPv4_address' => '192.168.0.2',\n+            'name' => 'Updated Gateway',\n+        ];\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n+    }\n+\n+    public function test_can_destroy_gateway()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n+\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n+\n+        $response->assertJsonStructure([\n+            'data' => [],\n+            'message',\n+        ]);\n+\n+        $response->assertStatus(200);\n+    }\n+}\n"
                },
                {
                    "date": 1727211441642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,17 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n@@ -79,9 +79,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n@@ -126,133 +126,4 @@\n \n         $response->assertStatus(200);\n     }\n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use Tests\\TestCase;\n-use App\\Models\\Gateway;\n-use Illuminate\\Support\\Facades\\Artisan;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n-\n-class GatewayTest extends TestCase\n-{\n-\n-    protected $user;\n-    protected $token;\n-\n-    protected function setUp(): void\n-    {\n-        parent::setUp();\n-\n-        $this->user = \\App\\Models\\User::where('name', 'Tester User')->first();\n-\n-        if (empty($this->user)) {\n-            $this->user = \\App\\Models\\User::factory()->create([\n-                'name' => 'Tester User',\n-                'email' => 'tester@example.com',\n-                'password' => '12345678',\n-            ]);\n-        }\n-        $this->token = 'Bearer '$this->user->createToken('TestToken')->plainTextToken;\n-\n-        $service = AdditionalDataRequest::getInstance();\n-        $service->setMethod('API');\n-    }\n-\n-    /**\n-     * A basic feature test example.\n-     */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-    }\n-\n-    public function test_get_gateway_list(): void\n-    {\n-\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/');\n-\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n-        ]);\n-\n-        $response->assertJsonCount(5, 'data');\n-    }\n-\n-    public function test_get_gateway_detail(): void\n-    {\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/1');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['id' => 1]);\n-    }\n-\n-    public function test_get_gateway_non_existing_gateway_detail(): void\n-    {\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/gateway/9999');\n-        $response->assertStatus(404);\n-    }\n-\n-    public function test_can_store_gateway()\n-    {\n-        $data = [\n-            'serial_number' => '12345678',\n-            'name' => 'Test Gateway',\n-            'IPv4_address' => '192.168.0.1',\n-            'peripheral' => [],\n-        ];\n-\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/gateway', $data);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($data);\n-        $response->assertStatus(201);\n-    }\n-\n-    public function test_can_update_gateway()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $id = $gateway->id;\n-\n-        $updatedData = [\n-            'serial_number' => '88888888',\n-            'IPv4_address' => '192.168.0.2',\n-            'name' => 'Updated Gateway',\n-        ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($updatedData);\n-        $response->assertStatus(200);\n-    }\n-\n-    public function test_can_destroy_gateway()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $id = $gateway->id;\n-\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n-\n-        $response->assertJsonStructure([\n-            'data' => [],\n-            'message',\n-        ]);\n-\n-        $response->assertStatus(200);\n-    }\n-}\n"
                },
                {
                    "date": 1727211449712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n@@ -116,9 +116,9 @@\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' =>$this->token])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n"
                },
                {
                    "date": 1727211465015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n     public function test_get_gateway_list(): void\n     {\n \n-        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/');\n+        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n"
                },
                {
                    "date": 1727211471664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,17 +58,17 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' =>$this->token])->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n"
                },
                {
                    "date": 1727211477569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' =>$this->token])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n@@ -100,9 +100,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' =>$this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1728285982646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n-\n     protected $user;\n     protected $token;\n \n     protected function setUp(): void\n@@ -116,9 +115,9 @@\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' =>$this->token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n"
                },
                {
                    "date": 1728285996994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n+\n     protected $user;\n     protected $token;\n \n     protected function setUp(): void\n"
                },
                {
                    "date": 1728455823685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     protected function setUp(): void\n     {\n         parent::setUp();\n \n-        $this->user = \\App\\Models\\User::where('name', 'Tester User')->first();\n+        $this->user = \\App\\Models\\User::where('name', 'admin')->first();\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'Tester User',\n"
                },
                {
                    "date": 1728455830683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         $this->user = \\App\\Models\\User::where('name', 'admin')->first();\n \n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n-                'name' => 'Tester User',\n-                'email' => 'tester@example.com',\n+                'name' => 'admin',\n+                'email' => 'admin@admin.com',\n                 'password' => '12345678',\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n"
                },
                {
                    "date": 1733836180386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         if (empty($this->user)) {\n             $this->user = \\App\\Models\\User::factory()->create([\n                 'name' => 'admin',\n                 'email' => 'admin@admin.com',\n-                'password' => '12345678',\n+                'password' => 'admin',\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n@@ -90,8 +90,32 @@\n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n \n+\n+    public function test_store_gateway_validation_fail()\n+    {\n+        $data = [\n+            'serial_number' => '', // Missing required serial number\n+            'name' => '', // Missing required name\n+            'IPv4_address' => 'invalid_address', // Invalid IPv4\n+            'peripheral' => [],\n+        ];\n+\n+        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/v2/gateway', $data);\n+\n+        $response->assertStatus(422); // Expecting validation errors\n+        $response->assertJsonStructure(['success', 'message', 'data' => ['serial_number',  'IPv4_address']]);\n+\n+        $response->assertJsonFragment([\n+            'serial_number' => ['The serial number field is required.'],\n+        ]);\n+\n+        $response->assertJsonFragment([\n+            'IPv4_address' => ['IPv4_address is invalid.'],\n+        ]);\n+    }\n+\n     public function test_can_update_gateway()\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n"
                },
                {
                    "date": 1733836187111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             'IPv4_address' => 'invalid_address', // Invalid IPv4\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/v2/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/gateway', $data);\n \n         $response->assertStatus(422); // Expecting validation errors\n         $response->assertJsonStructure(['success', 'message', 'data' => ['serial_number',  'IPv4_address']]);\n \n"
                },
                {
                    "date": 1733836203889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,5 +149,13 @@\n         ]);\n \n         $response->assertStatus(200);\n     }\n+\n+    public function test_get_gateway_list_unauthorized()\n+    {\n+        $response = $this->withHeaders([\n+            'Accept' => 'application/json',\n+        ])->get('/api/v2/gateway/');\n+        $response->assertStatus(401); // Expecting unauthorized status\n+    }\n }\n"
                },
                {
                    "date": 1733836255372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n-\n     protected $user;\n     protected $token;\n \n     protected function setUp(): void\n@@ -45,9 +44,8 @@\n     }\n \n     public function test_get_gateway_list(): void\n     {\n-\n         $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n@@ -90,9 +88,8 @@\n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n \n-\n     public function test_store_gateway_validation_fail()\n     {\n         $data = [\n             'serial_number' => '', // Missing required serial number\n@@ -103,9 +100,9 @@\n \n         $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/gateway', $data);\n \n         $response->assertStatus(422); // Expecting validation errors\n-        $response->assertJsonStructure(['success', 'message', 'data' => ['serial_number',  'IPv4_address']]);\n+        $response->assertJsonStructure(['success', 'message', 'data' => ['serial_number', 'IPv4_address']]);\n \n         $response->assertJsonFragment([\n             'serial_number' => ['The serial number field is required.'],\n         ]);\n@@ -154,8 +151,8 @@\n     public function test_get_gateway_list_unauthorized()\n     {\n         $response = $this->withHeaders([\n             'Accept' => 'application/json',\n-        ])->get('/api/v2/gateway/');\n+        ])->get('/api/gateway/');\n         $response->assertStatus(401); // Expecting unauthorized status\n     }\n }\n"
                },
                {
                    "date": 1733903955018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,29 @@\n \n         $response->assertStatus(200);\n     }\n \n+    public function test_user_with_no_permission_cannot_create_gateway()\n+{\n+    $userWithoutPermission = \\App\\Models\\User::factory()->create([\n+        // Simulate a user without the necessary permission\n+    ]);\n+\n+    $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n+\n+    $data = [\n+        'serial_number' => '12345678',\n+        'name' => 'Test Gateway',\n+        'IPv4_address' => '192.168.0.1',\n+        'peripheral' => [],\n+    ];\n+\n+    $response = $this->withHeaders(['Authorization' => $token])->postJson('/api/v2/gateway', $data);\n+\n+    $response->assertStatus(403); // Forbidden, no permission to create\n+}\n+\n+\n     public function test_get_gateway_list_unauthorized()\n     {\n         $response = $this->withHeaders([\n             'Accept' => 'application/json',\n"
                },
                {
                    "date": 1733904016492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,28 +148,32 @@\n         $response->assertStatus(200);\n     }\n \n     public function test_user_with_no_permission_cannot_create_gateway()\n-{\n-    $userWithoutPermission = \\App\\Models\\User::factory()->create([\n-        // Simulate a user without the necessary permission\n-    ]);\n+    {\n+        $userWithoutPermission = \\App\\Models\\User::factory()->create([\n+            // Simulate a user without the necessary permission\n+        ]);\n+        $this->user = \\App\\Models\\User::factory()->create([\n+            'name' => 'admin',\n+            'email' => 'admin@admin.com',\n+            'password' => 'admin',\n+        ]);\n \n-    $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n+        $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n \n-    $data = [\n-        'serial_number' => '12345678',\n-        'name' => 'Test Gateway',\n-        'IPv4_address' => '192.168.0.1',\n-        'peripheral' => [],\n-    ];\n+        $data = [\n+            'serial_number' => '12345678',\n+            'name' => 'Test Gateway',\n+            'IPv4_address' => '192.168.0.1',\n+            'peripheral' => [],\n+        ];\n \n-    $response = $this->withHeaders(['Authorization' => $token])->postJson('/api/v2/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $token])->postJson('/api/v2/gateway', $data);\n \n-    $response->assertStatus(403); // Forbidden, no permission to create\n-}\n+        $response->assertStatus(403); // Forbidden, no permission to create\n+    }\n \n-\n     public function test_get_gateway_list_unauthorized()\n     {\n         $response = $this->withHeaders([\n             'Accept' => 'application/json',\n"
                },
                {
                    "date": 1733904022632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n     {\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             // Simulate a user without the necessary permission\n         ]);\n-        $this->user = \\App\\Models\\User::factory()->create([\n+        $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             'name' => 'admin',\n             'email' => 'admin@admin.com',\n             'password' => 'admin',\n         ]);\n"
                },
                {
                    "date": 1733904031760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,9 @@\n             // Simulate a user without the necessary permission\n         ]);\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             'name' => 'admin',\n-            'email' => 'admin@admin.com',\n+            'email' => 'test@admin.com',\n             'password' => 'admin',\n         ]);\n \n         $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n"
                },
                {
                    "date": 1733904038327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,10 +153,10 @@\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             // Simulate a user without the necessary permission\n         ]);\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n-            'name' => 'admin',\n-            'email' => 'test@admin.com',\n+            'name' => 'test',\n+            'email' => 'test@test.com',\n             'password' => 'admin',\n         ]);\n \n         $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n"
                },
                {
                    "date": 1733904045493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             // Simulate a user without the necessary permission\n         ]);\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n-            'name' => 'test',\n+            'name' => 'userWithoutPermission',\n             'email' => 'test@test.com',\n             'password' => 'admin',\n         ]);\n \n"
                },
                {
                    "date": 1733904053679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,10 +153,10 @@\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             // Simulate a user without the necessary permission\n         ]);\n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n-            'name' => 'userWithoutPermission',\n-            'email' => 'test@test.com',\n+            'name' => 'userWithoutDeletePermission',\n+            'email' => 'userWithoutDeletePermission@test.com',\n             'password' => 'admin',\n         ]);\n \n         $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n"
                },
                {
                    "date": 1733904064899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,15 +149,13 @@\n     }\n \n     public function test_user_with_no_permission_cannot_create_gateway()\n     {\n+        \n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n-            // Simulate a user without the necessary permission\n-        ]);\n-        $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             'name' => 'userWithoutDeletePermission',\n             'email' => 'userWithoutDeletePermission@test.com',\n-            'password' => 'admin',\n+            'password' => 'userWithoutDeletePermission',\n         ]);\n \n         $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n \n"
                },
                {
                    "date": 1733904143008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,9 +149,8 @@\n     }\n \n     public function test_user_with_no_permission_cannot_create_gateway()\n     {\n-        \n         $userWithoutPermission = \\App\\Models\\User::factory()->create([\n             'name' => 'userWithoutDeletePermission',\n             'email' => 'userWithoutDeletePermission@test.com',\n             'password' => 'userWithoutDeletePermission',\n@@ -167,8 +166,14 @@\n         ];\n \n         $response = $this->withHeaders(['Authorization' => $token])->postJson('/api/v2/gateway', $data);\n \n+        $response->assertJsonStructure([\n+            'data' => [],\n+            'message',\n+        ]);\n+\n+        $response->assertStatus(200);\n         $response->assertStatus(403); // Forbidden, no permission to create\n     }\n \n     public function test_get_gateway_list_unauthorized()\n"
                },
                {
                    "date": 1733904157664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,10 +170,8 @@\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n-\n-        $response->assertStatus(200);\n         $response->assertStatus(403); // Forbidden, no permission to create\n     }\n \n     public function test_get_gateway_list_unauthorized()\n"
                },
                {
                    "date": 1733904194774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,17 +157,12 @@\n         ]);\n \n         $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n \n-        $data = [\n-            'serial_number' => '12345678',\n-            'name' => 'Test Gateway',\n-            'IPv4_address' => '192.168.0.1',\n-            'peripheral' => [],\n-        ];\n+        $gateway = Gateway::factory()->create();\n+        $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $token])->postJson('/api/v2/gateway', $data);\n-\n+        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1733904208460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n \n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $token])->deleteJson(\"/api/gateway/$id\");\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1733904260373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n \n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1733904272355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n \n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $token])->deleteJson(\"/api/gateway/$id\");\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1734943410528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n \n     public function test_get_gateway_detail(): void\n     {\n         $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1734943429824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n                 'password' => 'admin',\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n+        http://127.0.0.1:8000/api/auth/token\n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n@@ -57,9 +58,8 @@\n \n     public function test_get_gateway_detail(): void\n     {\n         $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n-        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1734943533808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,12 @@\n                 'password' => 'admin',\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n-        http://127.0.0.1:8000/api/auth/token\n \n+        \n+\n+\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n"
                },
                {
                    "date": 1734943578581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n         \n+        $tokenResponse = $this->tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n"
                },
                {
                    "date": 1734943585232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n-        \n+        $tokenService\n         $tokenResponse = $this->tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n"
                },
                {
                    "date": 1734943591046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n-        $tokenService\n-        $tokenResponse = $this->tokenService->generateTokenForUser($user);\n+        $tokenService = \n+        $tokenResponse = $tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n"
                },
                {
                    "date": 1734943625579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n-        $tokenService = \n+        $tokenService = new TokenService(new PersonalAccessTokenFactory(), new TokenRepository());\n         $tokenResponse = $tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n"
                },
                {
                    "date": 1734943656431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n-        $tokenService = new TokenService(new PersonalAccessTokenFactory(), new TokenRepository());\n-        $tokenResponse = $tokenService->generateTokenForUser($user);\n+        \n+        $tokenResponse = $this->tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n"
                },
                {
                    "date": 1734943663062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,8 @@\n             ]);\n         }\n         $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n-        \n-        $tokenResponse = $this->tokenService->generateTokenForUser($user);\n \n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n"
                },
                {
                    "date": 1734943765185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n                 'email' => 'admin@admin.com',\n                 'password' => 'admin',\n             ]);\n         }\n-        $this->token = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n+        $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n \n \n         $service = AdditionalDataRequest::getInstance();\n@@ -46,9 +46,9 @@\n     }\n \n     public function test_get_gateway_list(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/');\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->get('/api/gateway/');\n \n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n@@ -58,17 +58,17 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->token])->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n@@ -79,9 +79,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n@@ -99,9 +99,9 @@\n             'IPv4_address' => 'invalid_address', // Invalid IPv4\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->postJson('/api/gateway', $data);\n \n         $response->assertStatus(422); // Expecting validation errors\n         $response->assertJsonStructure(['success', 'message', 'data' => ['serial_number', 'IPv4_address']]);\n \n@@ -123,9 +123,9 @@\n             'serial_number' => '88888888',\n             'IPv4_address' => '192.168.0.2',\n             'name' => 'Updated Gateway',\n         ];\n-        $response = $this->withHeaders(['Authorization' => $this->token])->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->putJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n@@ -139,9 +139,9 @@\n     {\n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $this->token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->deleteJson(\"/api/gateway/$id\");\n \n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n"
                },
                {
                    "date": 1734943777472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n class GatewayTest extends TestCase\n {\n     protected $user;\n-    protected $token;\n+    protected $sanctumToken;\n \n     protected function setUp(): void\n     {\n         parent::setUp();\n@@ -157,14 +157,14 @@\n             'email' => 'userWithoutDeletePermission@test.com',\n             'password' => 'userWithoutDeletePermission',\n         ]);\n \n-        $token = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n+        $sanctumToken = 'Bearer ' . $userWithoutPermission->createToken('TestToken')->plainTextToken;\n \n         $gateway = Gateway::factory()->create();\n         $id = $gateway->id;\n \n-        $response = $this->withHeaders(['Authorization' => $token])->deleteJson(\"/api/gateway/$id\");\n+        $response = $this->withHeaders(['Authorization' => $sanctumToken])->deleteJson(\"/api/gateway/$id\");\n         $response->assertJsonStructure([\n             'data' => [],\n             'message',\n         ]);\n"
                },
                {
                    "date": 1734943786758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n class GatewayTest extends TestCase\n {\n     protected $user;\n     protected $sanctumToken;\n+    protected $sanctumToken;\n \n     protected function setUp(): void\n     {\n         parent::setUp();\n"
                },
                {
                    "date": 1734943796088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n class GatewayTest extends TestCase\n {\n     protected $user;\n     protected $sanctumToken;\n-    protected $sanctumToken;\n+    protected $oauthToken;\n \n     protected function setUp(): void\n     {\n         parent::setUp();\n"
                },
                {
                    "date": 1734943803667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,13 @@\n             ]);\n         }\n         $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n+        $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n+    $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n+\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n"
                },
                {
                    "date": 1734943824621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,12 +30,15 @@\n         }\n         $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n-    $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n+        $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n+        $sanctumToken = $this->user->createToken('SanctumTestToken');\n+    $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n \n+\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n"
                },
                {
                    "date": 1734943830307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,10 +32,11 @@\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n+        \n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n-    $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n+        $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n \n \n         $service = AdditionalDataRequest::getInstance();\n"
                },
                {
                    "date": 1734943837430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-        \n+        // Sanctum to\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n \n"
                },
                {
                    "date": 1734943892263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n                 'email' => 'admin@admin.com',\n                 'password' => 'admin',\n             ]);\n         }\n-        $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n+        // $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-        // Sanctum to\n+        // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n \n"
                },
                {
                    "date": 1734943974228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n                 'email' => 'admin@admin.com',\n                 'password' => 'admin',\n             ]);\n         }\n-        // $this->sanctumToken = 'Bearer ' . $this->user->createToken('TestToken')->plainTextToken;\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n"
                },
                {
                    "date": 1734944002389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1734944014385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->o])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1734944047668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n             'IPv4_address' => '192.168.0.1',\n             'peripheral' => [],\n         ];\n \n-        $response = $this->withHeaders(['Authorization' => $this->o])->postJson('/api/gateway', $data);\n+        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->postJson('/api/gateway', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1734944084612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' => $this->o])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n"
                },
                {
                    "date": 1734944595850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,10 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n+        $oauthToken = $token = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        ->make($user->id, 'TestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n@@ -65,17 +66,17 @@\n     }\n \n     public function test_get_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->sanctumToken])->get('/api/gateway/1');\n+        $response = $this->withHeaders(['Authorization' => $this->oauthToken])->get('/api/gateway/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n \n     public function test_get_gateway_non_existing_gateway_detail(): void\n     {\n-        $response = $this->withHeaders(['Authorization' => $this->o])->get('/api/gateway/9999');\n+        $response = $this->withHeaders(['Authorization' => $this->oauthToken])->get('/api/gateway/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_gateway()\n"
                },
                {
                    "date": 1734944629119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n             ]);\n         }\n \n         $oauthToken = $token = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        ->make($user->id, 'TestToken', ['view-profile', 'manage-users']);\n+        ->make($thisuser->id, 'TestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n"
                },
                {
                    "date": 1734944634767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        $oauthToken = $token = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        ->make($thisuser->id, 'TestToken', ['view-profile', 'manage-users']);\n+        $oauthToken =  app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        ->make($this->user->id, 'TestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n"
                },
                {
                    "date": 1734944727941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,9 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        $oauthToken =  app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        ->make($this->user->id, 'TestToken', ['view-profile', 'manage-users']);\n+        $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n"
                },
                {
                    "date": 1734944817817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,15 @@\n \n         $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n+\n+        $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        ->make($this->user->id, 'TestToken', ['view-profile', 'manage-users']);\n+        \n+        $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n+\n+\n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n"
                },
                {
                    "date": 1734944870686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,10 @@\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        ->make($this->user->id, 'TestToken', ['view-profile', 'manage-users']);\n-        \n+        ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n+\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734944886286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n-        $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n+        // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n+        // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n"
                },
                {
                    "date": 1734944985381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n         // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-\n+$id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945031693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n \n $id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n+        $this->tokenFactory->make($user->getKey(), 'User Personal Token', $scopes);\n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n"
                },
                {
                    "date": 1734945089338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n $id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n-        $this->tokenFactory->make($user->getKey(), 'User Personal Token', $scopes);\n+        $this->tokenFactory->make($user->getKey(), 'User Personal Token', ['view-profile', 'manage-users', 'manage-posts']);\n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n"
                },
                {
                    "date": 1734945094975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n $id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n-        $this->tokenFactory->make($user->getKey(), 'User Personal Token', ['view-profile', 'manage-users', 'manage-posts']);\n+        $this->tokenFactory->make($user->getKey(), 'User Personal Token', $scopes);\n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n"
                },
                {
                    "date": 1734945101859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n $id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n-        $this->tokenFactory->make($user->getKey(), 'User Personal Token', $scopes);\n+        \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n"
                },
                {
                    "date": 1734945111438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,11 +33,11 @@\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n $id = $this->user->getKey();\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        ->make($this->user->getKey(), 'TestToken', ['view-profile', 'manage-users']);\n-        \n+        ->make($this->user->getKey(), 'TestToken', $scopes);\n \n+\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945124096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,11 @@\n         // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n $id = $this->user->getKey();\n+\n+$scopes = $this->determineScopesBasedOnRole($user->getRoleNames()->all());\n+\n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n"
                },
                {
                    "date": 1734945143830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,11 @@\n use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n+\n+    use RoleScopeMapper;\n+    \n     protected $user;\n     protected $sanctumToken;\n     protected $oauthToken;\n \n@@ -33,9 +36,9 @@\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n $id = $this->user->getKey();\n \n-$scopes = $this->determineScopesBasedOnRole($user->getRoleNames()->all());\n+    $scopes = $this->determineScopesBasedOnRole($user->getRoleNames()->all());\n \n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n"
                },
                {
                    "date": 1734945157120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,19 @@\n namespace Tests\\Feature;\n \n use Tests\\TestCase;\n use App\\Models\\Gateway;\n+use App\\Traits\\RoleScopeMapper;\n use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Anasa\\ResponseStrategy\\AdditionalDataRequest;\n \n class GatewayTest extends TestCase\n {\n \n     use RoleScopeMapper;\n-    \n+\n     protected $user;\n     protected $sanctumToken;\n     protected $oauthToken;\n \n@@ -36,9 +37,9 @@\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n $id = $this->user->getKey();\n \n-    $scopes = $this->determineScopesBasedOnRole($user->getRoleNames()->all());\n+    $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n"
                },
                {
                    "date": 1734945162433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n \n         // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-$id = $this->user->getKey();\n \n     $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n         $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n"
                },
                {
                    "date": 1734945205241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,11 +36,11 @@\n         // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n         // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n-    $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n+        $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        $oauthToken = new(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945210778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $oauthToken = new(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        $oauthToken = new\\Laravel\\Passport\\PersonalAccessTokenFactory\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945215911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $oauthToken = new\\Laravel\\Passport\\PersonalAccessTokenFactory\n+        $oauthToken = new(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945266861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $oauthToken = new(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n+        \n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945275994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,11 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $oauthToken = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class)\n-        \n+        $tokenFactory = app(PersonalAccessTokenFactory::class);\n+        $oauthToken = $tokenFactory\n+\n         ->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945282084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,12 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory\n+        $tokenFactory = app(::class);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n-        ->make($this->user->getKey(), 'TestToken', $scopes);\n \n-\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945296290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(::class);\n+        $tokenFactory = app(PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945307209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(PersonalAccessTokenFactory::class);\n+        $tokenFactory = app(\\::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945318498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(\\::class);\n+        $tokenFactory = app(\\Laravel\\Passport\\Token::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945325339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(\\Laravel\\Passport\\Token::class);\n+        $tokenFactory = app(\\Laravel\\Passport\\Per::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945514541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n \n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n-        $tokenFactory = app(\\Laravel\\Passport\\Per::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n+        $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken');\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n"
                },
                {
                    "date": 1734945566973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,9 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n-        // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken');\n"
                },
                {
                    "date": 1734945668936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,13 +32,16 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n+        // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n+        // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n+\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken');\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n \n \n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n"
                },
                {
                    "date": 1734945674987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,8 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n-        // $oauthToken = $this->user->createToken('OAuthTestToken', ['view-profile', 'manage-users']);\n-        // $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n-\n-\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n \n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n"
                },
                {
                    "date": 1734945683950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,10 @@\n             ]);\n         }\n \n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n-\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n-\n-\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945689198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n                 'password' => 'admin',\n             ]);\n         }\n \n+        // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734945729271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'User Personal Token', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945757107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'User Personal Token', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'Laravel Password Grant Client', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945786075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'Laravel Password Grant Client', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'User Personal Token', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945798500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'User Personal Token', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945806808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'TestToken', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734945813139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n \n         // Oauth token generation\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n-        $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthToken', $scopes);\n+        $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n \n         // Sanctum token generation\n"
                },
                {
                    "date": 1734946399339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,9 @@\n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n+    \n \n     /**\n      * A basic feature test example.\n      */\n"
                },
                {
                    "date": 1734946404951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,10 +48,26 @@\n \n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n-    \n \n+    public function test_create_personal_access_client()\n+    {\n+        $this->app['config']->set('database.default', 'testing');\n+\n+        $exitCode = Artisan::call('passport:client', [\n+            '--personal' => true\n+        ]);\n+\n+        // Verificar que el comando haya salido correctamente\n+        $this->assertEquals(0, $exitCode);\n+\n+        // Verificar si el cliente de acceso personal ha sido creado\n+        $this->assertDatabaseHas('oauth_clients', [\n+            'personal_access_client' => 1\n+        ]);\n+    }\n+\n     /**\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n"
                },
                {
                    "date": 1734946411170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,13 +56,9 @@\n \n         $exitCode = Artisan::call('passport:client', [\n             '--personal' => true\n         ]);\n-\n-        // Verificar que el comando haya salido correctamente\n         $this->assertEquals(0, $exitCode);\n-\n-        // Verificar si el cliente de acceso personal ha sido creado\n         $this->assertDatabaseHas('oauth_clients', [\n             'personal_access_client' => 1\n         ]);\n     }\n"
                },
                {
                    "date": 1734946422087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,11 +53,10 @@\n     public function test_create_personal_access_client()\n     {\n         $this->app['config']->set('database.default', 'testing');\n \n-        $exitCode = Artisan::call('passport:client', [\n-            '--personal' => true\n-        ]);\n+        $exitCode = Artisan::call('passport:client', ['--personal' => true        ]);\n+\n         $this->assertEquals(0, $exitCode);\n         $this->assertDatabaseHas('oauth_clients', [\n             'personal_access_client' => 1\n         ]);\n"
                },
                {
                    "date": 1734946431205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,13 @@\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n-    public function test_create_personal_access_client()\n+    public function create_personal_access_client()\n     {\n         $this->app['config']->set('database.default', 'testing');\n \n-        $exitCode = Artisan::call('passport:client', ['--personal' => true        ]);\n+        $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n         $this->assertEquals(0, $exitCode);\n         $this->assertDatabaseHas('oauth_clients', [\n             'personal_access_client' => 1\n"
                },
                {
                    "date": 1734946437832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n-    public function create_personal_access_client()\n+    public function createPersonalAccessClient()\n     {\n         $this->app['config']->set('database.default', 'testing');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n"
                },
                {
                    "date": 1734946445244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n             ]);\n         }\n \n         // Oauth token generation\n+        $th\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n"
                },
                {
                    "date": 1734946800348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n             ]);\n         }\n \n         // Oauth token generation\n-        $th\n+        $this->createPersonalAccessClient();\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n@@ -52,8 +52,9 @@\n     }\n \n     public function createPersonalAccessClient()\n     {\n+        $this->useEnvironmentFile('.env.testing');\n         $this->app['config']->set('database.default', 'testing');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n"
                },
                {
                    "date": 1734946809225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n     }\n \n     public function createPersonalAccessClient()\n     {\n-        $this->useEnvironmentFile('.env.testing');\n+        $this->('.env.testing');\n         $this->app['config']->set('database.default', 'testing');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n"
                },
                {
                    "date": 1734946821667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,13 @@\n     }\n \n     public function createPersonalAccessClient()\n     {\n-        $this->('.env.testing');\n-        $this->app['config']->set('database.default', 'testing');\n+        this->useEnvironmentFile('.env.testing');\n \n+        // Puedes hacer la configuración de la base de datos aquí\n+        $this->app['config']->set('database.default', 'mysql');\n+\n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n         $this->assertEquals(0, $exitCode);\n         $this->assertDatabaseHas('oauth_clients', [\n"
                },
                {
                    "date": 1734946831741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,11 +52,9 @@\n     }\n \n     public function createPersonalAccessClient()\n     {\n-        this->useEnvironmentFile('.env.testing');\n-\n-        // Puedes hacer la configuración de la base de datos aquí\n+       \n         $this->app['config']->set('database.default', 'mysql');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n"
                },
                {
                    "date": 1734947089903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,16 +52,15 @@\n     }\n \n     public function createPersonalAccessClient()\n     {\n-       \n+\n         $this->app['config']->set('database.default', 'mysql');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n         $this->assertEquals(0, $exitCode);\n-        $this->assertDatabaseHas('oauth_clients', [\n-            'personal_access_client' => 1\n+        $this->assertDatabaseHas('oauth_clients', [            'personal_access_client' => 1\n         ]);\n     }\n \n     /**\n"
                },
                {
                    "date": 1734947096128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n class GatewayTest extends TestCase\n {\n-\n     use RoleScopeMapper;\n \n     protected $user;\n     protected $sanctumToken;\n@@ -39,29 +38,24 @@\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-\n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n-\n-\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n     public function createPersonalAccessClient()\n     {\n-\n         $this->app['config']->set('database.default', 'mysql');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n         $this->assertEquals(0, $exitCode);\n-        $this->assertDatabaseHas('oauth_clients', [            'personal_access_client' => 1\n-        ]);\n+        $this->assertDatabaseHas('oauth_clients', ['personal_access_client' => 1]);\n     }\n \n     /**\n      * A basic feature test example.\n"
                },
                {
                    "date": 1734947102030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n class GatewayTest extends TestCase\n {\n+\n     use RoleScopeMapper;\n \n     protected $user;\n     protected $sanctumToken;\n@@ -38,18 +39,22 @@\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n+\n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n+\n+\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n     public function createPersonalAccessClient()\n     {\n+\n         $this->app['config']->set('database.default', 'mysql');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n"
                },
                {
                    "date": 1734947127145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n \n class GatewayTest extends TestCase\n {\n-\n     use RoleScopeMapper;\n \n     protected $user;\n     protected $sanctumToken;\n@@ -35,26 +34,23 @@\n \n         // Oauth token generation\n         $this->createPersonalAccessClient();\n         $scopes = $this->determineScopesBasedOnRole($this->user->getRoleNames()->all());\n+\n         $tokenFactory = app(\\Laravel\\Passport\\PersonalAccessTokenFactory::class);\n         $oauthToken = $tokenFactory->make($this->user->getKey(), 'oauthTestToken', $scopes);\n         $this->oauthToken = 'Bearer ' . $oauthToken->accessToken;\n \n-\n         // Sanctum token generation\n         $sanctumToken = $this->user->createToken('SanctumTestToken');\n         $this->sanctumToken = 'Bearer ' . $sanctumToken->plainTextToken;\n \n-\n-\n         $service = AdditionalDataRequest::getInstance();\n         $service->setMethod('API');\n     }\n \n     public function createPersonalAccessClient()\n     {\n-\n         $this->app['config']->set('database.default', 'mysql');\n \n         $exitCode = Artisan::call('passport:client', ['--personal' => true]);\n \n"
                }
            ],
            "date": 1722420931409,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Tests\\TestCase;\n\nclass GatewayTest extends TestCase\n{\n    /**\n     * A basic feature test example.\n     */\n    public function test_te(): void\n    {\n        $response = $this->get('/');\n\n        $response->assertStatus(200);\n    }\n}\n"
        }
    ]
}