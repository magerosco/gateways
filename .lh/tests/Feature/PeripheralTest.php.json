{
    "sourceFile": "tests/Feature/PeripheralTest.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 121,
            "patches": [
                {
                    "date": 1722435520502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722435531099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n class PeripheralTest extends TestCase\n-{\n+\n     /**\n      * A basic feature test example.\n      */\n     {\n"
                },
                {
                    "date": 1722435556236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,8 @@\n use Tests\\TestCase;\n \n class PeripheralTest extends TestCase\n \n-    /**\n-     * A basic feature test example.\n-     */\n     {\n         /**\n          * A basic feature test example.\n          */\n@@ -21,11 +18,11 @@\n             $response = $this->get('/');\n             $response->assertStatus(200);\n         }\n \n-        public function test_get_gateway_list(): void\n+        public function test_get_peripheral_list(): void\n         {\n-            $response = $this->get('/api/gateway/');\n+            $response = $this->get('/api/peripheral/');\n             $response->assertStatus(200);\n             $response->assertJsonStructure([\n                 'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n             ]);\n"
                },
                {
                    "date": 1722435579014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         {\n             $response = $this->get('/api/peripheral/');\n             $response->assertStatus(200);\n             $response->assertJsonStructure([\n-                'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n+                'data' => [['id', 'UID', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n             ]);\n \n             $response->assertJsonCount(5, 'data');\n         }\n"
                },
                {
                    "date": 1722435586265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         {\n             $response = $this->get('/api/peripheral/');\n             $response->assertStatus(200);\n             $response->assertJsonStructure([\n-                'data' => [['id', 'UID', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n+                'data' => [['id', 'UID', 'vendor', 'status', 'peripheral', 'created_at', 'updated_at']],\n             ]);\n \n             $response->assertJsonCount(5, 'data');\n         }\n"
                },
                {
                    "date": 1722435606434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         {\n             $response = $this->get('/api/peripheral/');\n             $response->assertStatus(200);\n             $response->assertJsonStructure([\n-                'data' => [['id', 'UID', 'vendor', 'status', 'peripheral', 'created_at', 'updated_at']],\n+                'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n             ]);\n \n             $response->assertJsonCount(5, 'data');\n         }\n@@ -34,9 +34,9 @@\n         {\n \n             $response = $this->get('/api/gateway/1');\n             $response->assertStatus(200);\n-            $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n+            $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n             $response->assertJsonFragment(['id' => 1]);\n         }\n \n         public function test_get_gateway_non_existing_gateway_detail(): void\n"
                },
                {
                    "date": 1722435625551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n \n         public function test_get_gateway_detail(): void\n         {\n \n-            $response = $this->get('/api/gateway/1');\n+            $response = $this->get('/api/peripheral/1');\n             $response->assertStatus(200);\n             $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n             $response->assertJsonFragment(['id' => 1]);\n         }\n"
                },
                {
                    "date": 1722435639485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,18 +29,18 @@\n \n             $response->assertJsonCount(5, 'data');\n         }\n \n-        public function test_get_gateway_detail(): void\n+        public function test_get_peripheral_detail(): void\n         {\n \n             $response = $this->get('/api/peripheral/1');\n             $response->assertStatus(200);\n             $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n             $response->assertJsonFragment(['id' => 1]);\n         }\n \n-        public function test_get_gateway_non_existing_gateway_detail(): void\n+        public function test_get_peripheral_non_existing_gateway_detail(): void\n         {\n             $response = $this->get('/api/gateway/9999');\n             $response->assertStatus(404);\n         }\n"
                },
                {
                    "date": 1722435648117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,15 +38,15 @@\n             $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n             $response->assertJsonFragment(['id' => 1]);\n         }\n \n-        public function test_get_peripheral_non_existing_gateway_detail(): void\n+        public function test_get_peripheral_non_existing_peripheral_detail(): void\n         {\n-            $response = $this->get('/api/gateway/9999');\n+            $response = $this->get('/api/peripheral/9999');\n             $response->assertStatus(404);\n         }\n \n-        public function test_can_store_gateway()\n+        public function test_can_store_peripheral()\n         {\n             $data = [\n                 'serial_number' => '12345678',\n                 'name' => 'Test Gateway',\n"
                },
                {
                    "date": 1722435665141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n         public function test_can_store_peripheral()\n         {\n             $data = [\n-                'serial_number' => '12345678',\n+                'UID' => '12345678',\n                 'name' => 'Test Gateway',\n                 'IPv4_address' => '192.168.0.1',\n                 'peripheral' => [],\n             ];\n"
                },
                {
                    "date": 1722435673652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Tests\\TestCase;\n+\n+class PeripheralTest extends TestCase\n+\n+    {\n+        /**\n+         * A basic feature test example.\n+         */\n+        public function test_set_database_config(): void\n+        {\n+            Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+            $response = $this->get('/');\n+            $response->assertStatus(200);\n+        }\n+\n+        public function test_get_peripheral_list(): void\n+        {\n+            $response = $this->get('/api/peripheral/');\n+            $response->assertStatus(200);\n+            $response->assertJsonStructure([\n+                'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n+            ]);\n+\n+            $response->assertJsonCount(5, 'data');\n+        }\n+\n+        public function test_get_peripheral_detail(): void\n+        {\n+\n+            $response = $this->get('/api/peripheral/1');\n+            $response->assertStatus(200);\n+            $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n+            $response->assertJsonFragment(['id' => 1]);\n+        }\n+\n+        public function test_get_peripheral_non_existing_peripheral_detail(): void\n+        {\n+            $response = $this->get('/api/peripheral/9999');\n+            $response->assertStatus(404);\n+        }\n+\n+        public function test_can_store_peripheral()\n+        {\n+            $data = [\n+                'UID' => '123456',\n+                'name' => 'Test Gateway',\n+                'IPv4_address' => '192.168.0.1',\n+                'peripheral' => [],\n+            ];\n+\n+            $response = $this->postJson('/api/gateway', $data);\n+\n+            $response->assertJsonStructure([\n+                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+                'message',\n+            ]);\n+\n+            $response->assertJsonFragment($data);\n+            $response->assertStatus(201);\n+        }\n+\n+        public function test_can_update_gateway()\n+        {\n+\n+            $gateway = Gateway::factory()->create();\n+            $id = $gateway->id;\n+\n+            $updatedData = [\n+                'serial_number' => '88888888',\n+                'IPv4_address' => '192.168.0.2',\n+                'name' => 'Updated Gateway',\n+            ];\n+            $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+\n+            $response->assertJsonStructure([\n+                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+                'message',\n+            ]);\n+\n+            $response->assertJsonFragment($updatedData);\n+            $response->assertStatus(200);\n+        }\n+    }\n+\n+}\n"
                },
                {
                    "date": 1722435685547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         public function test_can_store_peripheral()\n         {\n             $data = [\n                 'UID' => '123456',\n-                'name' => 'Test Gateway',\n+                'vendor' => 'Test Gateway',\n                 'IPv4_address' => '192.168.0.1',\n                 'peripheral' => [],\n             ];\n \n@@ -88,95 +88,4 @@\n         }\n     }\n \n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Tests\\TestCase;\n-\n-class PeripheralTest extends TestCase\n-\n-    {\n-        /**\n-         * A basic feature test example.\n-         */\n-        public function test_set_database_config(): void\n-        {\n-            Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-            $response = $this->get('/');\n-            $response->assertStatus(200);\n-        }\n-\n-        public function test_get_peripheral_list(): void\n-        {\n-            $response = $this->get('/api/peripheral/');\n-            $response->assertStatus(200);\n-            $response->assertJsonStructure([\n-                'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n-            ]);\n-\n-            $response->assertJsonCount(5, 'data');\n-        }\n-\n-        public function test_get_peripheral_detail(): void\n-        {\n-\n-            $response = $this->get('/api/peripheral/1');\n-            $response->assertStatus(200);\n-            $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n-            $response->assertJsonFragment(['id' => 1]);\n-        }\n-\n-        public function test_get_peripheral_non_existing_peripheral_detail(): void\n-        {\n-            $response = $this->get('/api/peripheral/9999');\n-            $response->assertStatus(404);\n-        }\n-\n-        public function test_can_store_peripheral()\n-        {\n-            $data = [\n-                'UID' => '12345678',\n-                'name' => 'Test Gateway',\n-                'IPv4_address' => '192.168.0.1',\n-                'peripheral' => [],\n-            ];\n-\n-            $response = $this->postJson('/api/gateway', $data);\n-\n-            $response->assertJsonStructure([\n-                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-                'message',\n-            ]);\n-\n-            $response->assertJsonFragment($data);\n-            $response->assertStatus(201);\n-        }\n-\n-        public function test_can_update_gateway()\n-        {\n-\n-            $gateway = Gateway::factory()->create();\n-            $id = $gateway->id;\n-\n-            $updatedData = [\n-                'serial_number' => '88888888',\n-                'IPv4_address' => '192.168.0.2',\n-                'name' => 'Updated Gateway',\n-            ];\n-            $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n-\n-            $response->assertJsonStructure([\n-                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n-                'message',\n-            ]);\n-\n-            $response->assertJsonFragment($updatedData);\n-            $response->assertStatus(200);\n-        }\n-    }\n-\n-}\n"
                },
                {
                    "date": 1722435692799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         public function test_can_store_peripheral()\n         {\n             $data = [\n                 'UID' => '123456',\n-                'vendor' => 'Test Gateway',\n+                'vendor' => 'vendor TEST',\n                 'IPv4_address' => '192.168.0.1',\n                 'peripheral' => [],\n             ];\n \n"
                },
                {
                    "date": 1722435700817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         {\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST',\n-                'IPv4_address' => '192.168.0.1',\n+                'gateway_id' => '192.168.0.1',\n                 'peripheral' => [],\n             ];\n \n             $response = $this->postJson('/api/gateway', $data);\n"
                },
                {
                    "date": 1722435711370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,10 +49,10 @@\n         {\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST',\n-                'gateway_id' => '192.168.0.1',\n-                'peripheral' => [],\n+                'gateway_id' => 1,\n+                'status' => [],\n             ];\n \n             $response = $this->postJson('/api/gateway', $data);\n \n"
                },
                {
                    "date": 1722435721406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST',\n                 'gateway_id' => 1,\n-                'status' => [],\n+                'status' => online,\n             ];\n \n             $response = $this->postJson('/api/gateway', $data);\n \n"
                },
                {
                    "date": 1722435729059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST',\n                 'gateway_id' => 1,\n-                'status' => online,\n+                'status' => \"'online'\",\n             ];\n \n             $response = $this->postJson('/api/gateway', $data);\n \n"
                },
                {
                    "date": 1722435737007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,12 @@\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST',\n                 'gateway_id' => 1,\n-                'status' => \"'online'\",\n+                'status' => \"online\",\n             ];\n \n-            $response = $this->postJson('/api/gateway', $data);\n+            $response = $this->postJson('/api/peripheral', $data);\n \n             $response->assertJsonStructure([\n                 'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n                 'message',\n"
                },
                {
                    "date": 1722435754217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n \n             $response = $this->postJson('/api/peripheral', $data);\n \n             $response->assertJsonStructure([\n-                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+                'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n                 'message',\n             ]);\n \n             $response->assertJsonFragment($data);\n"
                },
                {
                    "date": 1722435767369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,11 +71,12 @@\n             $gateway = Gateway::factory()->create();\n             $id = $gateway->id;\n \n             $updatedData = [\n-                'serial_number' => '88888888',\n-                'IPv4_address' => '192.168.0.2',\n-                'name' => 'Updated Gateway',\n+                'UID' => '123456',\n+                'vendor' => 'vendor TEST',\n+                'gateway_id' => 1,\n+                'status' => \"online\",\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n             $response->assertJsonStructure([\n"
                },
                {
                    "date": 1722435772739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             $id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n-                'vendor' => 'vendor TEST',\n+                'vendor' => 'vendor TEST ',\n                 'gateway_id' => 1,\n                 'status' => \"online\",\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n"
                },
                {
                    "date": 1722435782081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n         public function test_can_store_peripheral()\n         {\n             $data = [\n                 'UID' => '123456',\n-                'vendor' => 'vendor TEST',\n+                'vendor' => 'vendor UPDATED',\n                 'gateway_id' => 1,\n                 'status' => \"online\",\n             ];\n \n@@ -72,9 +72,9 @@\n             $id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n-                'vendor' => 'vendor TEST ',\n+                'vendor' => 'vendor TEST CREATED',\n                 'gateway_id' => 1,\n                 'status' => \"online\",\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n"
                },
                {
                    "date": 1722435802344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n             $updatedData = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST CREATED',\n                 'gateway_id' => 1,\n-                'status' => \"online\",\n+                'status' => \"offline\",\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n             $response->assertJsonStructure([\n"
                },
                {
                    "date": 1722435812815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n             $response->assertJsonStructure([\n-                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n+                'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n                 'message',\n             ]);\n \n             $response->assertJsonFragment($updatedData);\n"
                },
                {
                    "date": 1722435846734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n         public function test_can_update_gateway()\n         {\n \n             $gateway = Gateway::factory()->create();\n+            $gateway = Gateway::factory()->create();\n             $id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n"
                },
                {
                    "date": 1722435854520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,14 +69,14 @@\n         {\n \n             $gateway = Gateway::factory()->create();\n             $gateway = Gateway::factory()->create();\n-            $id = $gateway->id;\n+            $$gateway_id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST CREATED',\n-                'gateway_id' => 1,\n+                'gateway_id' => $$gateway_id,\n                 'status' => \"offline\",\n             ];\n             $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n"
                },
                {
                    "date": 1722435871083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,15 @@\n             $response->assertJsonFragment($data);\n             $response->assertStatus(201);\n         }\n \n-        public function test_can_update_gateway()\n+        public function test_can_update_peripheral()\n         {\n \n             $gateway = Gateway::factory()->create();\n             $gateway = Gateway::factory()->create();\n             $$gateway_id = $gateway->id;\n+            $$gateway_id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST CREATED',\n"
                },
                {
                    "date": 1722435878382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,12 @@\n \n         public function test_can_update_peripheral()\n         {\n \n+            $peripheral = Gateway::factory()->create();\n             $gateway = Gateway::factory()->create();\n-            $gateway = Gateway::factory()->create();\n+            $$gateway_id = $peripheral->id;\n             $$gateway_id = $gateway->id;\n-            $$gateway_id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST CREATED',\n"
                },
                {
                    "date": 1722435884165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,10 @@\n         public function test_can_update_peripheral()\n         {\n \n             $peripheral = Gateway::factory()->create();\n+            $id = $peripheral->id;\n             $gateway = Gateway::factory()->create();\n-            $$gateway_id = $peripheral->id;\n             $$gateway_id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n"
                },
                {
                    "date": 1722435895152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,13 @@\n \n         public function test_can_update_peripheral()\n         {\n \n+            $gateway = Gateway::factory()->create();\n+            $$gateway_id = $gateway->id;\n+            \n             $peripheral = Gateway::factory()->create();\n             $id = $peripheral->id;\n-            $gateway = Gateway::factory()->create();\n-            $$gateway_id = $gateway->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor TEST CREATED',\n"
                },
                {
                    "date": 1722435908121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n         {\n \n             $gateway = Gateway::factory()->create();\n             $$gateway_id = $gateway->id;\n-            \n-            $peripheral = Gateway::factory()->create();\n+\n+            $peripheral = {Gateway}::factory()->create();\n             $id = $peripheral->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n"
                },
                {
                    "date": 1722435915099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n \n             $gateway = Gateway::factory()->create();\n             $$gateway_id = $gateway->id;\n \n-            $peripheral = {Gateway}::factory()->create();\n+            $peripheral = Per::factory()->create();\n             $id = $peripheral->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n"
                },
                {
                    "date": 1722435920939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n <?php\n \n namespace Tests\\Feature;\n \n+use App\\Models\\Peripheral;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n@@ -70,9 +71,9 @@\n \n             $gateway = Gateway::factory()->create();\n             $$gateway_id = $gateway->id;\n \n-            $peripheral = Per::factory()->create();\n+            $peripheral = Peripheral::factory()->create();\n             $id = $peripheral->id;\n \n             $updatedData = [\n                 'UID' => '123456',\n"
                },
                {
                    "date": 1722435935215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,5 +92,4 @@\n             $response->assertStatus(200);\n         }\n     }\n \n-}\n"
                },
                {
                    "date": 1722435945761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace Tests\\Feature;\n \n use App\\Models\\Peripheral;\n+\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n"
                },
                {
                    "date": 1722435951990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \n namespace Tests\\Feature;\n \n use App\\Models\\Peripheral;\n+use App\\Models\\G;\n \n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n"
                },
                {
                    "date": 1722435962729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n namespace Tests\\Feature;\n \n use App\\Models\\Peripheral;\n-use App\\Models\\G;\n+use App\\Models\\Gateway;\n \n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n"
                },
                {
                    "date": 1722435988958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n namespace Tests\\Feature;\n \n use App\\Models\\Peripheral;\n use App\\Models\\Gateway;\n-\n+use Illuminate\\Support\\Facades\\Artisan;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n@@ -49,8 +49,12 @@\n         }\n \n         public function test_can_store_peripheral()\n         {\n+\n+\n+            $gateway = Gateway::factory()->create();\n+            $$gateway_id = $gateway->id;\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor UPDATED',\n                 'gateway_id' => 1,\n"
                },
                {
                    "date": 1722435995500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,15 +50,15 @@\n \n         public function test_can_store_peripheral()\n         {\n \n-\n             $gateway = Gateway::factory()->create();\n             $$gateway_id = $gateway->id;\n+\n             $data = [\n                 'UID' => '123456',\n                 'vendor' => 'vendor UPDATED',\n-                'gateway_id' => 1,\n+                'gateway_id' => $$gateway_id,\n                 'status' => \"online\",\n             ];\n \n             $response = $this->postJson('/api/peripheral', $data);\n"
                },
                {
                    "date": 1722436018994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,93 +9,88 @@\n use Illuminate\\Foundation\\Testing\\WithFaker;\n use Tests\\TestCase;\n \n class PeripheralTest extends TestCase\n+{\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n \n+    public function test_get_peripheral_list(): void\n     {\n-        /**\n-         * A basic feature test example.\n-         */\n-        public function test_set_database_config(): void\n-        {\n-            Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-            $response = $this->get('/');\n-            $response->assertStatus(200);\n-        }\n+        $response = $this->get('/api/peripheral/');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n+        ]);\n \n-        public function test_get_peripheral_list(): void\n-        {\n-            $response = $this->get('/api/peripheral/');\n-            $response->assertStatus(200);\n-            $response->assertJsonStructure([\n-                'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n-            ]);\n+        $response->assertJsonCount(5, 'data');\n+    }\n \n-            $response->assertJsonCount(5, 'data');\n-        }\n+    public function test_get_peripheral_detail(): void\n+    {\n+        $response = $this->get('/api/peripheral/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n \n-        public function test_get_peripheral_detail(): void\n-        {\n+    public function test_get_peripheral_non_existing_peripheral_detail(): void\n+    {\n+        $response = $this->get('/api/peripheral/9999');\n+        $response->assertStatus(404);\n+    }\n \n-            $response = $this->get('/api/peripheral/1');\n-            $response->assertStatus(200);\n-            $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n-            $response->assertJsonFragment(['id' => 1]);\n-        }\n+    public function test_can_store_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $$gateway_id = $gateway->id;\n \n-        public function test_get_peripheral_non_existing_peripheral_detail(): void\n-        {\n-            $response = $this->get('/api/peripheral/9999');\n-            $response->assertStatus(404);\n-        }\n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $$gateway_id,\n+            'status' => 'online',\n+        ];\n \n-        public function test_can_store_peripheral()\n-        {\n+        $response = $this->postJson('/api/peripheral', $data);\n \n-            $gateway = Gateway::factory()->create();\n-            $$gateway_id = $gateway->id;\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n \n-            $data = [\n-                'UID' => '123456',\n-                'vendor' => 'vendor UPDATED',\n-                'gateway_id' => $$gateway_id,\n-                'status' => \"online\",\n-            ];\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n \n-            $response = $this->postJson('/api/peripheral', $data);\n+    public function test_can_update_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $$gateway_id = $gateway->id;\n \n-            $response->assertJsonStructure([\n-                'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n-                'message',\n-            ]);\n+        $peripheral = Peripheral::factory()->create();\n+        $id = $peripheral->id;\n \n-            $response->assertJsonFragment($data);\n-            $response->assertStatus(201);\n-        }\n+        $updatedData = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor TEST CREATED',\n+            'gateway_id' => $$gateway_id,\n+            'status' => 'offline',\n+        ];\n+        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n-        public function test_can_update_peripheral()\n-        {\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n \n-            $gateway = Gateway::factory()->create();\n-            $$gateway_id = $gateway->id;\n-\n-            $peripheral = Peripheral::factory()->create();\n-            $id = $peripheral->id;\n-\n-            $updatedData = [\n-                'UID' => '123456',\n-                'vendor' => 'vendor TEST CREATED',\n-                'gateway_id' => $$gateway_id,\n-                'status' => \"offline\",\n-            ];\n-            $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n-\n-            $response->assertJsonStructure([\n-                'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n-                'message',\n-            ]);\n-\n-            $response->assertJsonFragment($updatedData);\n-            $response->assertStatus(200);\n-        }\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n     }\n-\n+}\n"
                },
                {
                    "date": 1722436030475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \n         $data = [\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n-            'gateway_id' => $$gateway_id,\n+            'gateway_id' => $gateway_id,\n             'status' => 'online',\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n"
                },
                {
                    "date": 1722436037124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n     public function test_can_store_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n-        $$gateway_id = $gateway->id;\n+        $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n@@ -71,9 +71,9 @@\n \n     public function test_can_update_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n-        $$gateway_id = $gateway->id;\n+        $gateway_id = $gateway->id;\n \n         $peripheral = Peripheral::factory()->create();\n         $id = $peripheral->id;\n \n"
                },
                {
                    "date": 1722436054644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,12 +79,12 @@\n \n         $updatedData = [\n             'UID' => '123456',\n             'vendor' => 'vendor TEST CREATED',\n-            'gateway_id' => $$gateway_id,\n+            'gateway_id' => $gateway_id,\n             'status' => 'offline',\n         ];\n-        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1722436064178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n             'vendor' => 'vendor TEST CREATED',\n             'gateway_id' => $gateway_id,\n             'status' => 'offline',\n         ];\n-        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n+        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1722436131403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         $response->assertJsonStructure([\n             'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n         ]);\n \n-        $response->assertJsonCount(5, 'data');\n+        $response->assertJsonCount(10, 'data');\n     }\n \n     public function test_get_peripheral_detail(): void\n     {\n@@ -82,9 +82,9 @@\n             'vendor' => 'vendor TEST CREATED',\n             'gateway_id' => $gateway_id,\n             'status' => 'offline',\n         ];\n-        $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n+        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1722436231301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,31 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n+    public function test_can_store_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $gateway_id = $gateway->id;\n \n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'online',\n+        ];\n+\n+        $response = $this->postJson('/api/peripheral', $data);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n+\n     public function test_can_update_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n"
                },
                {
                    "date": 1722436236494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n-    public function test_can_store_peripheral()\n+    public function test_in_store_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436256119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n-    public function test_in_store_peripheral()\n+    public function test_caninvalid_store_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436264233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n-    public function test_caninvalid_store_peripheral()\n+    public function test_cantnot_store_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436270668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n-    public function test_cantnot_store_peripheral()\n+    public function test_cantnot_store_invalid_statusperipheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436278955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,18 +67,18 @@\n \n         $response->assertJsonFragment($data);\n         $response->assertStatus(201);\n     }\n-    public function test_cantnot_store_invalid_statusperipheral()\n+    public function test_cantnot_store_invalid_status_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n             'gateway_id' => $gateway_id,\n-            'status' => 'online',\n+            'status' => 'in',\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n"
                },
                {
                    "date": 1722436285093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n         $data = [\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n             'gateway_id' => $gateway_id,\n-            'status' => 'in',\n+            'status' => 'invalid',\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n"
                },
                {
                    "date": 1722436309014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,9 @@\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure([\n+            ''\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n"
                },
                {
                    "date": 1722436314092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure([\n-            ''\n+            'success',\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n         ]);\n \n"
                },
                {
                    "date": 1722436328239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,9 @@\n         $response = $this->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure([\n             'success',\n-            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'data' => ['status'],\n             'message',\n         ]);\n \n         $response->assertJsonFragment($data);\n"
                },
                {
                    "date": 1722436349731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n             'data' => ['status'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment($data);\n+        $response->assertJsonFragment();\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_peripheral()\n"
                },
                {
                    "date": 1722436355106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n             'data' => ['status'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment();\n+        $response->assertJsonFragment(['status'=>]);\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_peripheral()\n"
                },
                {
                    "date": 1722436362663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n             'data' => ['status'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment(['status'=>]);\n+        $response->assertJsonFragment(['status'=>['invalid status']]);\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_peripheral()\n"
                },
                {
                    "date": 1722436369814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n             'data' => ['status'],\n             'message',\n         ]);\n \n-        $response->assertJsonFragment(['status'=>['invalid status']]);\n+        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(201);\n     }\n \n     public function test_can_update_peripheral()\n"
                },
                {
                    "date": 1722436399173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n             'message',\n         ]);\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n-        $response->assertStatus(201);\n+        $response->assertStatus(400);\n     }\n \n     public function test_can_update_peripheral()\n     {\n"
                },
                {
                    "date": 1722436718266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,30 @@\n         ]);\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n+    }public function test_cantnot_store_invalid_status_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $gateway_id = $gateway->id;\n+\n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'invalid',\n+        ];\n+\n+        $response = $this->postJson('/api/peripheral', $data);\n+\n+        $response->assertJsonStructure([\n+            'success',\n+            'data' => ['status'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n+        $response->assertStatus(400);\n     }\n \n     public function test_can_update_peripheral()\n     {\n"
                },
                {
                    "date": 1722436729967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,10 @@\n         ]);\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n-    }public function test_cantnot_store_invalid_status_peripheral()\n+    }\n+    public function test_cantnot_store_11_status_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436739808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_store_11_status_peripheral()\n+    public function test_cantnot_a_11_status_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436749885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_a_11_status_peripheral()\n+    public function test_cantnot_asociate_11__peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436756275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_asociate_11__peripheral()\n+    public function test_cantnot_asociate_11_peripheral()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436762296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_asociate_11_peripheral()\n+    public function test_cantnot_asociate_11_peripheral_t()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436770890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_asociate_11_peripheral_t()\n+    public function test_cantnot_asociate_11_peripheral_to_gatwa()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436791467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_cantnot_asociate_11_peripheral_to_gatwa()\n+    public function test_e_asociate_11_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436798231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_e_asociate_11_peripheral_to_gatewy()\n+    public function test_ec_asociate_11_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436803438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_ec_asociate_11_peripheral_to_gatewy()\n+    public function test_exceds_asociate_11_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436809256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_exceds_asociate_11_peripheral_to_gatewy()\n+    public function test_exceds_asociate_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436814392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_exceds_asociate_peripheral_to_gatewy()\n+    public function test_exceds_li_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436820005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_exceds_li_peripheral_to_gatewy()\n+    public function test_exceds_limit_peripheral_to_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436825474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n-    public function test_exceds_limit_peripheral_to_gatewy()\n+    public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n         $gateway_id = $gateway->id;\n \n"
                },
                {
                    "date": 1722436914389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,8 +93,9 @@\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory()->create();\n+        \n         $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n"
                },
                {
                    "date": 1722436923620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,10 @@\n         $response->assertStatus(400);\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n-        $gateway = Gateway::factory()->create();\n-        \n+        $gateway = Gateway::factory(11)->create();\n+        f\n         $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n"
                },
                {
                    "date": 1722436930641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n         $response->assertStatus(400);\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n-        $gateway = Gateway::factory(11)->create();\n+        $gateway = Gateway::factory()->create();\n         f\n         $gateway_id = $gateway->id;\n \n         $data = [\n"
                },
                {
                    "date": 1722436939983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,10 +92,12 @@\n         $response->assertStatus(400);\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n-        $gateway = Gateway::factory()->create();\n-        f\n+        $gateway = Gateway::factory(11)->create();\n+        foreach ($gateway as $key => $value) {\n+            \n+        }\n         $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n"
                },
                {
                    "date": 1722437106963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,10 @@\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n-        foreach ($gateway as $key => $value) {\n-            \n+        foreach ($gateway as  $value) {\n+\n         }\n         $gateway_id = $gateway->id;\n \n         $data = [\n"
                },
                {
                    "date": 1722437115586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,12 +93,12 @@\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n-        foreach ($gateway as  $value) {\n+        foreach ($gateway as $value) {\n \n+            $gateway_id = $gateway->id;\n         }\n-        $gateway_id = $gateway->id;\n \n         $data = [\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n"
                },
                {
                    "date": 1722437149082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,11 +93,11 @@\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n-        foreach ($gateway as $value) {\n+        foreach ($gateway as $$value) {\n \n-            $gateway_id = $gateway->id;\n+            $gateway_id = $value->id;\n         }\n \n         $data = [\n             'UID' => '123456',\n"
                },
                {
                    "date": 1722437166198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,10 @@\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n-        foreach ($gateway as $$value) {\n-\n+        foreach ($gateway as $key => $value) {\n+if($key > 10) break;\n             $gateway_id = $value->id;\n         }\n \n         $data = [\n"
                },
                {
                    "date": 1722437176360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,10 @@\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n-if($key > 10) break;\n+            if($key > 10)\n+             break;\n             $gateway_id = $value->id;\n         }\n \n         $data = [\n"
                },
                {
                    "date": 1722437217991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+<?php\n+\n+namespace Tests\\Feature;\n+\n+use App\\Models\\Peripheral;\n+use App\\Models\\Gateway;\n+use Illuminate\\Support\\Facades\\Artisan;\n+use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n+use Tests\\TestCase;\n+\n+class PeripheralTest extends TestCase\n+{\n+    /**\n+     * A basic feature test example.\n+     */\n+    public function test_set_database_config(): void\n+    {\n+        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n+        $response = $this->get('/');\n+        $response->assertStatus(200);\n+    }\n+\n+    public function test_get_peripheral_list(): void\n+    {\n+        $response = $this->get('/api/peripheral/');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure([\n+            'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n+        ]);\n+\n+        $response->assertJsonCount(10, 'data');\n+    }\n+\n+    public function test_get_peripheral_detail(): void\n+    {\n+        $response = $this->get('/api/peripheral/1');\n+        $response->assertStatus(200);\n+        $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n+        $response->assertJsonFragment(['id' => 1]);\n+    }\n+\n+    public function test_get_peripheral_non_existing_peripheral_detail(): void\n+    {\n+        $response = $this->get('/api/peripheral/9999');\n+        $response->assertStatus(404);\n+    }\n+\n+    public function test_can_store_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $gateway_id = $gateway->id;\n+\n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'online',\n+        ];\n+\n+        $response = $this->postJson('/api/peripheral', $data);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($data);\n+        $response->assertStatus(201);\n+    }\n+    public function test_cantnot_store_invalid_status_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $gateway_id = $gateway->id;\n+\n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'invalid',\n+        ];\n+\n+        $response = $this->postJson('/api/peripheral', $data);\n+\n+        $response->assertJsonStructure([\n+            'success',\n+            'data' => ['status'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n+        $response->assertStatus(400);\n+    }\n+    public function test_exceds_limit_peripheral_for_gatewy()\n+    {\n+        $gateway = Gateway::factory(11)->create();\n+        foreach ($gateway as $key => $value) {\n+            if($key > 10)\n+            {\n+                \n+            }\n+            $gateway_id = $value->id;\n+        }\n+\n+        $data = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor UPDATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'invalid',\n+        ];\n+\n+        $response = $this->postJson('/api/peripheral', $data);\n+\n+        $response->assertJsonStructure([\n+            'success',\n+            'data' => ['status'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n+        $response->assertStatus(400);\n+    }\n+\n+    public function test_can_update_peripheral()\n+    {\n+        $gateway = Gateway::factory()->create();\n+        $gateway_id = $gateway->id;\n+\n+        $peripheral = Peripheral::factory()->create();\n+        $id = $peripheral->id;\n+\n+        $updatedData = [\n+            'UID' => '123456',\n+            'vendor' => 'vendor TEST CREATED',\n+            'gateway_id' => $gateway_id,\n+            'status' => 'offline',\n+        ];\n+        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n+\n+        $response->assertJsonStructure([\n+            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n+            'message',\n+        ]);\n+\n+        $response->assertJsonFragment($updatedData);\n+        $response->assertStatus(200);\n+    }\n+}\n"
                },
                {
                    "date": 1722437229772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,10 +96,11 @@\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n             if($key > 10)\n             {\n-                \n+\n             }\n+            \n             $gateway_id = $value->id;\n         }\n \n         $data = [\n@@ -145,150 +146,4 @@\n         $response->assertJsonFragment($updatedData);\n         $response->assertStatus(200);\n     }\n }\n-<?php\n-\n-namespace Tests\\Feature;\n-\n-use App\\Models\\Peripheral;\n-use App\\Models\\Gateway;\n-use Illuminate\\Support\\Facades\\Artisan;\n-use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Tests\\TestCase;\n-\n-class PeripheralTest extends TestCase\n-{\n-    /**\n-     * A basic feature test example.\n-     */\n-    public function test_set_database_config(): void\n-    {\n-        Artisan::call('migrate:fresh --seed --env=\"testing\"');\n-        $response = $this->get('/');\n-        $response->assertStatus(200);\n-    }\n-\n-    public function test_get_peripheral_list(): void\n-    {\n-        $response = $this->get('/api/peripheral/');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure([\n-            'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n-        ]);\n-\n-        $response->assertJsonCount(10, 'data');\n-    }\n-\n-    public function test_get_peripheral_detail(): void\n-    {\n-        $response = $this->get('/api/peripheral/1');\n-        $response->assertStatus(200);\n-        $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n-        $response->assertJsonFragment(['id' => 1]);\n-    }\n-\n-    public function test_get_peripheral_non_existing_peripheral_detail(): void\n-    {\n-        $response = $this->get('/api/peripheral/9999');\n-        $response->assertStatus(404);\n-    }\n-\n-    public function test_can_store_peripheral()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $gateway_id = $gateway->id;\n-\n-        $data = [\n-            'UID' => '123456',\n-            'vendor' => 'vendor UPDATED',\n-            'gateway_id' => $gateway_id,\n-            'status' => 'online',\n-        ];\n-\n-        $response = $this->postJson('/api/peripheral', $data);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($data);\n-        $response->assertStatus(201);\n-    }\n-    public function test_cantnot_store_invalid_status_peripheral()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $gateway_id = $gateway->id;\n-\n-        $data = [\n-            'UID' => '123456',\n-            'vendor' => 'vendor UPDATED',\n-            'gateway_id' => $gateway_id,\n-            'status' => 'invalid',\n-        ];\n-\n-        $response = $this->postJson('/api/peripheral', $data);\n-\n-        $response->assertJsonStructure([\n-            'success',\n-            'data' => ['status'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n-        $response->assertStatus(400);\n-    }\n-    public function test_exceds_limit_peripheral_for_gatewy()\n-    {\n-        $gateway = Gateway::factory(11)->create();\n-        foreach ($gateway as $key => $value) {\n-            if($key > 10)\n-             break;\n-            $gateway_id = $value->id;\n-        }\n-\n-        $data = [\n-            'UID' => '123456',\n-            'vendor' => 'vendor UPDATED',\n-            'gateway_id' => $gateway_id,\n-            'status' => 'invalid',\n-        ];\n-\n-        $response = $this->postJson('/api/peripheral', $data);\n-\n-        $response->assertJsonStructure([\n-            'success',\n-            'data' => ['status'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n-        $response->assertStatus(400);\n-    }\n-\n-    public function test_can_update_peripheral()\n-    {\n-        $gateway = Gateway::factory()->create();\n-        $gateway_id = $gateway->id;\n-\n-        $peripheral = Peripheral::factory()->create();\n-        $id = $peripheral->id;\n-\n-        $updatedData = [\n-            'UID' => '123456',\n-            'vendor' => 'vendor TEST CREATED',\n-            'gateway_id' => $gateway_id,\n-            'status' => 'offline',\n-        ];\n-        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n-\n-        $response->assertJsonStructure([\n-            'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n-            'message',\n-        ]);\n-\n-        $response->assertJsonFragment($updatedData);\n-        $response->assertStatus(200);\n-    }\n-}\n"
                },
                {
                    "date": 1722437278357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,13 +98,15 @@\n             if($key > 10)\n             {\n \n             }\n-            \n+\n             $gateway_id = $value->id;\n         }\n \n         $data = [\n+            'UID' => fake()->randomNumber(6),\n+            'vendor' => fake()->company(),\n             'UID' => '123456',\n             'vendor' => 'vendor UPDATED',\n             'gateway_id' => $gateway_id,\n             'status' => 'invalid',\n"
                },
                {
                    "date": 1722437284670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,8 @@\n         $data = [\n             'UID' => fake()->randomNumber(6),\n             'vendor' => fake()->company(),\n             'UID' => '123456',\n-            'vendor' => 'vendor UPDATED',\n             'gateway_id' => $gateway_id,\n             'status' => 'invalid',\n         ];\n \n"
                },
                {
                    "date": 1722437302763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,11 +105,9 @@\n \n         $data = [\n             'UID' => fake()->randomNumber(6),\n             'vendor' => fake()->company(),\n-            'UID' => '123456',\n-            'gateway_id' => $gateway_id,\n-            'status' => 'invalid',\n+            'gateway_id' => $gateway_id\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n"
                },
                {
                    "date": 1722437309651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,10 @@\n \n         $data = [\n             'UID' => fake()->randomNumber(6),\n             'vendor' => fake()->company(),\n-            'gateway_id' => $gateway_id\n+            'gateway_id' => $gateway_id,\n+            \n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n"
                },
                {
                    "date": 1722437334380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,14 @@\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n             if($key > 10)\n             {\n-\n+                $data = [\n+                    'UID' => fake()->randomNumber(6),\n+                    'vendor' => fake()->company(),\n+                    'gateway_id' => $gateway_id,\n+                    'status' => 'online',\n+                ];\n             }\n \n             $gateway_id = $value->id;\n         }\n@@ -106,9 +111,9 @@\n         $data = [\n             'UID' => fake()->randomNumber(6),\n             'vendor' => fake()->company(),\n             'gateway_id' => $gateway_id,\n-            \n+            'status' => 'online',\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n"
                },
                {
                    "date": 1722437341345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n             if($key > 10)\n             {\n+                $gateway_id\n                 $data = [\n                     'UID' => fake()->randomNumber(6),\n                     'vendor' => fake()->company(),\n                     'gateway_id' => $gateway_id,\n"
                },
                {
                    "date": 1722437354198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,15 +96,16 @@\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n             if($key > 10)\n             {\n-                $gateway_id\n+                $gateway_id = $value->id;\n                 $data = [\n                     'UID' => fake()->randomNumber(6),\n                     'vendor' => fake()->company(),\n                     'gateway_id' => $gateway_id,\n                     'status' => 'online',\n                 ];\n+                $response = $this->postJson('/api/peripheral', $data);\n             }\n \n             $gateway_id = $value->id;\n         }\n"
                },
                {
                    "date": 1722437363636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,11 @@\n                     'gateway_id' => $gateway_id,\n                     'status' => 'online',\n                 ];\n                 $response = $this->postJson('/api/peripheral', $data);\n+                $response->assertStatus(201);\n             }\n+            \n \n             $gateway_id = $value->id;\n         }\n \n"
                },
                {
                    "date": 1722437371191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,11 +105,12 @@\n                     'status' => 'online',\n                 ];\n                 $response = $this->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n+                \n             }\n-            \n \n+\n             $gateway_id = $value->id;\n         }\n \n         $data = [\n"
                },
                {
                    "date": 1722437381922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,10 @@\n                     'status' => 'online',\n                 ];\n                 $response = $this->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n-                \n+                $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n+                c\n             }\n \n \n             $gateway_id = $value->id;\n"
                },
                {
                    "date": 1722437389551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,11 @@\n                 ];\n                 $response = $this->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n-                c\n+                continue;\n             }\n+            \n \n \n             $gateway_id = $value->id;\n         }\n"
                },
                {
                    "date": 1722437396825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n-            if($key > 10)\n+            if($key > 11)\n             {\n                 $gateway_id = $value->id;\n                 $data = [\n                     'UID' => fake()->randomNumber(6),\n"
                },
                {
                    "date": 1722437402295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n-            if($key > 11)\n+            if($key < 11)\n             {\n                 $gateway_id = $value->id;\n                 $data = [\n                     'UID' => fake()->randomNumber(6),\n"
                },
                {
                    "date": 1722437408889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,16 @@\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n             }\n-            \n+            $gateway_id = $value->id;\n+                $data = [\n+                    'UID' => fake()->randomNumber(6),\n+                    'vendor' => fake()->company(),\n+                    'gateway_id' => $gateway_id,\n+                    'status' => 'online',\n+                ];\n+                $response = $this->postJson('/api/peripheral', $data);\n \n \n             $gateway_id = $value->id;\n         }\n"
                },
                {
                    "date": 1722437416164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,16 +121,9 @@\n \n             $gateway_id = $value->id;\n         }\n \n-        $data = [\n-            'UID' => fake()->randomNumber(6),\n-            'vendor' => fake()->company(),\n-            'gateway_id' => $gateway_id,\n-            'status' => 'online',\n-        ];\n \n-        $response = $this->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure([\n             'success',\n             'data' => ['status'],\n"
                },
                {
                    "date": 1722437424001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,13 +123,8 @@\n         }\n \n \n \n-        $response->assertJsonStructure([\n-            'success',\n-            'data' => ['status'],\n-            'message',\n-        ]);\n \n         $response->assertJsonFragment(['status'=>['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n"
                },
                {
                    "date": 1722437433975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,11 +116,14 @@\n                     'gateway_id' => $gateway_id,\n                     'status' => 'online',\n                 ];\n                 $response = $this->postJson('/api/peripheral', $data);\n+                $response->assertJsonStructure([\n+                    'success',\n+                    'data' => ['status'],\n+                    'message',\n+                ]);\n \n-\n-            $gateway_id = $value->id;\n         }\n \n \n \n"
                },
                {
                    "date": 1722437439647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,8 @@\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n             }\n-            $gateway_id = $value->id;\n                 $data = [\n                     'UID' => fake()->randomNumber(6),\n                     'vendor' => fake()->company(),\n                     'gateway_id' => $gateway_id,\n"
                },
                {
                    "date": 1722437449367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,17 +94,19 @@\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n+\n+            $gateway_id = $value->id;\n+            $data = [\n+                'UID' => fake()->randomNumber(6),\n+                'vendor' => fake()->company(),\n+                'gateway_id' => $gateway_id,\n+                'status' => 'online',\n+            ];\n             if($key < 11)\n             {\n-                $gateway_id = $value->id;\n-                $data = [\n-                    'UID' => fake()->randomNumber(6),\n-                    'vendor' => fake()->company(),\n-                    'gateway_id' => $gateway_id,\n-                    'status' => 'online',\n-                ];\n+\n                 $response = $this->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n"
                },
                {
                    "date": 1722437487013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,56 +81,37 @@\n         ];\n \n         $response = $this->postJson('/api/peripheral', $data);\n \n-        $response->assertJsonStructure([\n-            'success',\n-            'data' => ['status'],\n-            'message',\n-        ]);\n+        $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n \n-        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n+        $response->assertJsonFragment(['status' => ['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n     public function test_exceds_limit_peripheral_for_gatewy()\n     {\n         $gateway = Gateway::factory(11)->create();\n         foreach ($gateway as $key => $value) {\n-\n             $gateway_id = $value->id;\n             $data = [\n                 'UID' => fake()->randomNumber(6),\n                 'vendor' => fake()->company(),\n                 'gateway_id' => $gateway_id,\n                 'status' => 'online',\n             ];\n-            if($key < 11)\n-            {\n-\n+            if ($key < 11) {\n                 $response = $this->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n             }\n-                $data = [\n-                    'UID' => fake()->randomNumber(6),\n-                    'vendor' => fake()->company(),\n-                    'gateway_id' => $gateway_id,\n-                    'status' => 'online',\n-                ];\n-                $response = $this->postJson('/api/peripheral', $data);\n-                $response->assertJsonStructure([\n-                    'success',\n-                    'data' => ['status'],\n-                    'message',\n-                ]);\n \n+            $response = $this->postJson('/api/peripheral', $data);\n+            $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n+            $response->assertJsonFragment(['status' => ['status is invalid.']]);\n         }\n \n-\n-\n-\n-        $response->assertJsonFragment(['status'=>['status is invalid.']]);\n+        $response->assertJsonFragment(['status' => ['status is invalid.']]);\n         $response->assertStatus(400);\n     }\n \n     public function test_can_update_peripheral()\n"
                },
                {
                    "date": 1722437492568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,12 +107,10 @@\n \n             $response = $this->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n             $response->assertJsonFragment(['status' => ['status is invalid.']]);\n+            $response->assertStatus(400);\n         }\n-\n-        $response->assertJsonFragment(['status' => ['status is invalid.']]);\n-        $response->assertStatus(400);\n     }\n \n     public function test_can_update_peripheral()\n     {\n"
                },
                {
                    "date": 1722437512135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n             }\n \n             $response = $this->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n-            $response->assertJsonFragment(['status' => ['status is invalid.']]);\n+            $response->assertJsonFragment(['status' => ['status can't be associated with more than 10 gateways.']]);\n             $response->assertStatus(400);\n         }\n     }\n \n"
                },
                {
                    "date": 1722437518212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n             }\n \n             $response = $this->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n-            $response->assertJsonFragment(['status' => ['status can't be associated with more than 10 gateways.']]);\n+            $response->assertJsonFragment(['status' => ['status can't be associated with more than 10 gateways.\"]]);\n             $response->assertStatus(400);\n         }\n     }\n \n"
                },
                {
                    "date": 1722437523301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n             }\n \n             $response = $this->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n-            $response->assertJsonFragment(['status' => ['status can't be associated with more than 10 gateways.\"]]);\n+            $response->assertJsonFragment(['status' => [\"status can't be associated with more than 10 gateways.\"]]);\n             $response->assertStatus(400);\n         }\n     }\n \n"
                },
                {
                    "date": 1722437533013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n             }\n \n             $response = $this->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n-            $response->assertJsonFragment(['status' => [\"status can't be associated with more than 10 gateways.\"]]);\n+            $response->assertJsonFragment(['status' => [\"gateway_id can't be associated with more than 10 gateways.\"]]);\n             $response->assertStatus(400);\n         }\n     }\n \n"
                },
                {
                    "date": 1725130578996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     }\n \n     public function test_get_peripheral_list(): void\n     {\n-        $response = $this->get('/api/peripheral/');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/peripheral/');\n         $response->assertStatus(200);\n         $response->assertJsonStructure([\n             'data' => [['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']],\n         ]);\n"
                },
                {
                    "date": 1725130584211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     }\n \n     public function test_get_peripheral_detail(): void\n     {\n-        $response = $this->get('/api/peripheral/1');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/peripheral/1');\n         $response->assertStatus(200);\n         $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n         $response->assertJsonFragment(['id' => 1]);\n     }\n"
                },
                {
                    "date": 1725130591164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     }\n \n     public function test_get_peripheral_non_existing_peripheral_detail(): void\n     {\n-        $response = $this->get('/api/peripheral/9999');\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->withHeaders(['Authorization' => 'Bearer ' . $this->token])->get('/api/peripheral/9999');\n         $response->assertStatus(404);\n     }\n \n     public function test_can_store_peripheral()\n"
                },
                {
                    "date": 1725130600191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n             'gateway_id' => $gateway_id,\n             'status' => 'online',\n         ];\n \n-        $response = $this->postJson('/api/peripheral', $data);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725130615211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             'gateway_id' => $gateway_id,\n             'status' => 'invalid',\n         ];\n \n-        $response = $this->postJson('/api/peripheral', $data);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/peripheral', $data);\n \n         $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n \n         $response->assertJsonFragment(['status' => ['status is invalid.']]);\n@@ -98,9 +98,9 @@\n                 'gateway_id' => $gateway_id,\n                 'status' => 'online',\n             ];\n             if ($key < 11) {\n-                $response = $this->postJson('/api/peripheral', $data);\n+                $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/peripheral', $data);\n                 $response->assertStatus(201);\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n             }\n"
                },
                {
                    "date": 1725130621212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n                 $response->assertJsonStructure(['data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at']]);\n                 continue;\n             }\n \n-            $response = $this->postJson('/api/peripheral', $data);\n+            $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->postJson('/api/peripheral', $data);\n             $response->assertJsonStructure(['success', 'data' => ['status'], 'message']);\n             $response->assertJsonFragment(['status' => [\"gateway_id can't be associated with more than 10 gateways.\"]]);\n             $response->assertStatus(400);\n         }\n"
                },
                {
                    "date": 1725130644442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n             'vendor' => 'vendor TEST CREATED',\n             'gateway_id' => $gateway_id,\n             'status' => 'offline',\n         ];\n-        $response = $this->putJson(\"/api/peripheral/$id\", $updatedData);\n+        $response = $this->withHeaders(['Authorization' => 'Bearer ' . $this->token])->putJson(\"/api/peripheral/$id\", $updatedData);\n \n         $response->assertJsonStructure([\n             'data' => ['id', 'UID', 'vendor', 'status', 'gateway_id', 'created_at', 'updated_at'],\n             'message',\n"
                },
                {
                    "date": 1725130664675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,28 @@\n use Tests\\TestCase;\n \n class PeripheralTest extends TestCase\n {\n+\n+    protected $user;\n+    protected $token;\n+\n+    protected function setUp(): void\n+    {\n+        parent::setUp();\n+\n+        $this->user = \\App\\Models\\User::where('name', 'Tester User')->first();\n+\n+        if (empty($this->user)) {\n+            $this->user = \\App\\Models\\User::factory()->create([\n+                'name' => 'Tester User',\n+                'email' => 'tester@example.com',\n+                'password' => '12345678',\n+            ]);\n+        }\n+        $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+    }\n+    \n     /**\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n"
                },
                {
                    "date": 1725130760188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,19 @@\n             ]);\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n     }\n-    \n+\n     /**\n      * A basic feature test example.\n      */\n     public function test_set_database_config(): void\n     {\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n+\n+        AdditionalDataRequest::setMethod('API');\n     }\n \n     public function test_get_peripheral_list(): void\n     {\n"
                },
                {
                    "date": 1725130765596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n <?php\n \n namespace Tests\\Feature;\n \n+use Tests\\TestCase;\n+use App\\Models\\Gateway;\n use App\\Models\\Peripheral;\n-use App\\Models\\Gateway;\n+use App\\Facades\\AdditionalDataRequest;\n use Illuminate\\Support\\Facades\\Artisan;\n+use Illuminate\\Foundation\\Testing\\WithFaker;\n use Illuminate\\Foundation\\Testing\\RefreshDatabase;\n-use Illuminate\\Foundation\\Testing\\WithFaker;\n-use Tests\\TestCase;\n \n class PeripheralTest extends TestCase\n {\n \n"
                },
                {
                    "date": 1725130780719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,8 @@\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n \n-        AdditionalDataRequest::setMethod('API');\n     }\n \n     public function test_get_peripheral_list(): void\n     {\n"
                },
                {
                    "date": 1725130792130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,11 @@\n                 'password' => '12345678',\n             ]);\n         }\n         $this->token = $this->user->createToken('TestToken')->plainTextToken;\n+\n+\n+        AdditionalDataRequest::setMethod('API');\n     }\n \n     /**\n      * A basic feature test example.\n@@ -39,9 +42,8 @@\n     {\n         Artisan::call('migrate:fresh --seed --env=\"testing\"');\n         $response = $this->get('/');\n         $response->assertStatus(200);\n-\n     }\n \n     public function test_get_peripheral_list(): void\n     {\n"
                }
            ],
            "date": 1722435520502,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace Tests\\Feature;\n\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Foundation\\Testing\\WithFaker;\nuse Tests\\TestCase;\n\nclass PeripheralTest extends TestCase\n{\n    /**\n     * A basic feature test example.\n     */\n    {\n        /**\n         * A basic feature test example.\n         */\n        public function test_set_database_config(): void\n        {\n            Artisan::call('migrate:fresh --seed --env=\"testing\"');\n            $response = $this->get('/');\n            $response->assertStatus(200);\n        }\n\n        public function test_get_gateway_list(): void\n        {\n            $response = $this->get('/api/gateway/');\n            $response->assertStatus(200);\n            $response->assertJsonStructure([\n                'data' => [['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']],\n            ]);\n\n            $response->assertJsonCount(5, 'data');\n        }\n\n        public function test_get_gateway_detail(): void\n        {\n\n            $response = $this->get('/api/gateway/1');\n            $response->assertStatus(200);\n            $response->assertJsonStructure(['data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at']]);\n            $response->assertJsonFragment(['id' => 1]);\n        }\n\n        public function test_get_gateway_non_existing_gateway_detail(): void\n        {\n            $response = $this->get('/api/gateway/9999');\n            $response->assertStatus(404);\n        }\n\n        public function test_can_store_gateway()\n        {\n            $data = [\n                'serial_number' => '12345678',\n                'name' => 'Test Gateway',\n                'IPv4_address' => '192.168.0.1',\n                'peripheral' => [],\n            ];\n\n            $response = $this->postJson('/api/gateway', $data);\n\n            $response->assertJsonStructure([\n                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n                'message',\n            ]);\n\n            $response->assertJsonFragment($data);\n            $response->assertStatus(201);\n        }\n\n        public function test_can_update_gateway()\n        {\n\n            $gateway = Gateway::factory()->create();\n            $id = $gateway->id;\n\n            $updatedData = [\n                'serial_number' => '88888888',\n                'IPv4_address' => '192.168.0.2',\n                'name' => 'Updated Gateway',\n            ];\n            $response = $this->putJson(\"/api/gateway/$id\", $updatedData);\n\n            $response->assertJsonStructure([\n                'data' => ['id', 'serial_number', 'name', 'IPv4_address', 'peripheral', 'created_at', 'updated_at'],\n                'message',\n            ]);\n\n            $response->assertJsonFragment($updatedData);\n            $response->assertStatus(200);\n        }\n    }\n\n}\n"
        }
    ]
}