{
    "sourceFile": "app/Http/Requests/GatewayRequest.php",
    "activeCommit": 1,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [],
            "date": 1722338626725,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass GatewayRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, \\Illuminate\\Contracts\\Validation\\ValidationRule|array<mixed>|string>\n     */\n    public function rules(): array\n    {\n        return [\n            //\n        ];\n    }\n}\n"
        },
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1725034888222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1725034888222,
            "name": "ls",
            "content": "<?php\n\nnamespace App\\Http\\Requests;\n\nuse Illuminate\\Validation\\Rule;\nuse App\\Rules\\ValidIPv4AddressRule;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Illuminate\\Contracts\\Validation\\Validator;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Illuminate\\Http\\Exceptions\\HttpResponseException;\n\nclass GatewayRequest extends FormRequest\n{\n    /**\n     * Determine if the user is authorized to make this request.\n     */\n    public function authorize(): bool\n    {\n        return true;\n    }\n\n    /**\n     * Get the validation rules that apply to the request.\n     *\n     * @return array<string, \\Illuminate\\Contracts\\Validation\\ValidationRule|array<mixed>|string>\n     */\n    public function rules(): array\n    {\n        $objectId = $this->route('id');\n        return [\n            'name' => 'max:255',\n            'serial_number' => ['required', Rule::unique('gateways', 'serial_number')->ignore($objectId)],\n            'IPv4_address' => [new ValidIPv4AddressRule()],\n        ];\n    }\n\n    protected function prepareForValidation()\n    {\n        $this->merge([\n            'name' => strip_tags($this->name),\n            'serial_number' => strip_tags($this->serial_number),\n        ]);\n    }\n\n    protected function failedValidation(Validator $validator)\n    {\n        $errors = $validator->errors();\n\n        throw new HttpResponseException(\n            response()->json(\n                [\n                    'success' => false,\n                    'message' => 'Validation errors',\n                    'data' => $errors,\n                ],\n                Response::HTTP_BAD_REQUEST,\n            ),\n        );\n    }\n}\n"
        }
    ]
}